package compi;

import java_cup.runtime.Symbol;
import java.awt.List;
import java.util.ArrayList;
import java.util.Stack;


//PARSER 
parser code
{:     
    //Error recovery
    public void syntax_error(Symbol s){
        Errorjv.texto += "Syntax error: " + s.value + " Line " + (s.left+1) + " Col " + ( s.right + 1) +"\n";
        System.out.println("Syntax error: " + s.value + " Line " + (s.left+1) + " Col " + ( s.right + 1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        Errorjv.texto += "Syntax error: " + s.value + " Line " + (s.left+1) + " Col " + ( s.right + 1) +"\n";
        System.out.println("Fatal Syntax Error: "+ s.value + " Linea " + (s.left+1) + " Col " + (s.right + 1) +"\n");
    }
 
    public Nodo RegresarNodo(){
    return nodo;
    } 


    Stack<Nodo> pila = new Stack<Nodo>();     

    Nodo nodo = new Nodo();

Nodo nodolista1=new Nodo();
Nodo nodolista2=new Nodo();
Nodo nodoimp=new Nodo(); 
Nodo nodonombre=new Nodo(); 
Nodo nodoclas = new Nodo();

Nodo clac = new Nodo(); 
Nodo visc = new Nodo(); 
Nodo idc = new Nodo(); 
Nodo contclase = new Nodo();
Nodo varc = new Nodo();

Nodo varstatc=new Nodo();
Nodo listavar=new Nodo();
Nodo varvisc=new Nodo();
Nodo vartipoc=new Nodo();

Nodo varfinalc=new Nodo();


   

:}

action code
{:
  public String c = "";
  
:}

terminal String IMP, VOIDD, CLAS, COMILLA, NEWW, MASMAS, MENOSMENOS, PAR_A, PAR_B, CORRCH_A, CORRCH_B, COMA, PUNTOCOMA, PUNTO, MENORR, MENORRIGUAL, MAYORR, MAYORRIGUAL, DIFERENTE, GUALIGUAL, ANDD;
terminal String ORR, NOTT, MAS, MODULO, MENOS, POR, COMILLASIMP, DIVIDIR,  INT, CHARR,  BOOL, DOUB, LONGG, STRINGG, PUB, PROTEC, PRIV,  STAT, FINA, RET,  BRE,  IFF,  ELS,  DEF,  CAS;
terminal String FORR, WHIL, THE, DOSPUNTOS, SWIT, DOO, PACK, CONS, READL, WRITEL, MASS, NUMERO, IDD, FILA, IGUALIGUAL, TEXTO, IGUAL, TRU, FAL, TEXTO1, CONT; 


nonterminal String INICIO, IMPORTCLASS, MOD, IMPORT, IMPORT2, CLASS, NOMBREIMP, PACKAGE, CADENAIMP, CADENAIMPPUNTO, CADENAIMPID, VISIB, OPERADORES, CONTENIDOSWITCH3;
nonterminal String IIF, CONDICION, CADENAIMPASTER, CONTENIDOCLASE, DECLARACIONDATO, VACIO, STATIC, DECLARACION, TIPOD, LISTAID, LISTAID2, EXP, NUMID, OPMAT;
nonterminal String DECLACADENA, ASIGNAR, DECLAMETODO, PARAMETROS, PARAMETROS2, PARAMETROS3, CONTENIDOMETODO, CONTENIDOMETODO2, IIFF, CONTENIDOCLASE2, CONDIFF, IDDD;
nonterminal String METODODATO, NO, CONTENIDOMETODO3, FINAL, FINALSTATIC, CONDICION2, OP, OPOI, ELSE, ELSE2, ELSE1, ELSEI, WHILE, DO, FOR, ELSEI2, ELSEI3, PRINT,PA;
nonterminal String SWITCH, THES, LLAMADA, CONTENIDOLLAMADA, CONTENIDOLLAMADA2, CONTENIDOSWITCH, CONTENIDOSWITCH2, COMILL, DEFAULT, RETURN, RETURN2, MET, LLAMADA2, LLAMADA3, INT2, FINAL2;
nonterminal String VISFI;
precedence left MAS, MENOS, POR, DIVIDIR, MODULO;

start with INICIO;

INICIO ::= PACKAGE{:nodo.contenido = "Inico";:}
;

PACKAGE ::= PA:p PUNTOCOMA 
{: 
Nodo nod=new Nodo(); 
Nodo nodopack=new Nodo(); 

nodopack.contenido="Package"; 
nod.contenido = p; 

nodopack.nodo.add(nod); 
nodo.nodo.add(nodopack);
:} 
IMPORTCLASS 
         |IMPORTCLASS
         |error PUNTOCOMA
         |error CORRCH_B
;

PA::=PACK IDD:id {: RESULT = id; :}

;



IMPORTCLASS ::= {: 
nodoimp.contenido="Import"; 
nodolista1.contenido = "Lista Import";
nodoimp.nodo.add(nodolista1);
nodo.nodo.add(nodoimp);
:} IMPORT:imp  CLASS 
             |CLASS
;

CLASS ::= VISIB:vis CLAS:cla IDD:id CORRCH_A 
{:
nodoclas.contenido = "Clase";

clac.contenido = "clase"; 
visc.contenido = vis;  
idc.contenido = id;

contclase.contenido="Contenido Clase";


nodoclas.nodo.add(clac);
nodoclas.nodo.add(visc);
nodoclas.nodo.add(idc);
nodoclas.nodo.add(contclase);
nodo.nodo.add(nodoclas);

:} 
CONTENIDOCLASE2 CORRCH_B

;

CONTENIDOCLASE2 ::= CONTENIDOCLASE2 CONTENIDOCLASE
                |CONTENIDOCLASE
;

CONTENIDOCLASE ::= DECLARACIONDATO
                |DECLAMETODO
;

DECLAMETODO ::= VISIB STATIC TIPOD:td IDD:id PAR_A PARAMETROS3:paramet PAR_B CORRCH_A CONTENIDOMETODO3 CORRCH_B
;


RETURN::= RET EXP PUNTOCOMA
        |RET PUNTOCOMA

;

MOD::= IDD MAS IGUAL EXP PUNTOCOMA 

;

CONTENIDOMETODO3 ::= CONTENIDOMETODO
                  |VACIO
;

CONTENIDOMETODO ::= CONTENIDOMETODO CONTENIDOMETODO2
                |CONTENIDOMETODO2
;

CONTENIDOMETODO2 ::= METODODATO
                   |IIFF
                   |WHILE
                   |DO
                   |FOR
                   |SWITCH
                   |LLAMADA
                   |THES
                   |RETURN 
                   |BRE PUNTOCOMA
                   |CONT PUNTOCOMA
                   |error PUNTOCOMA 
                   |error CORRCH_B
                   
;

PRINT::=CONS PUNTO READL PUNTO WRITEL PAR_A EXP PAR_B PUNTOCOMA

;

THES ::=THE PUNTO IDD IGUAL EXP PUNTOCOMA
   
;

LLAMADA2 ::= LLAMADA3 
          |VACIO
;

LLAMADA3::=LLAMADA3 PUNTO IDD 
        |PUNTO IDD
;

LLAMADA ::= IDD LLAMADA2 PAR_A CONTENIDOLLAMADA PAR_B PUNTOCOMA

;

CONTENIDOLLAMADA ::= CONTENIDOLLAMADA COMA CONTENIDOLLAMADA2
                   |CONTENIDOLLAMADA2
;

CONTENIDOLLAMADA2 ::= EXP
;

SWITCH::= SWIT PAR_A EXP PAR_B CORRCH_A CONTENIDOSWITCH2 CORRCH_B

;

CONTENIDOSWITCH2::= CONTENIDOSWITCH3
                 |VACIO
;

CONTENIDOSWITCH3 ::=CONTENIDOSWITCH3 CONTENIDOSWITCH
;

COMILL::= TEXTO1
        |TEXTO 
        |NUMERO
;

DEFAULT ::= DEF DOSPUNTOS CONTENIDOMETODO3 
         |VACIO
;

CONTENIDOSWITCH::= CAS COMILL DOSPUNTOS CONTENIDOMETODO3
             |DEFAULT DOSPUNTOS CONTENIDOMETODO3
;

FOR ::= FORR PAR_A  IDDD PUNTOCOMA CONDICION PUNTOCOMA IDDD PAR_B CORRCH_A CONTENIDOMETODO3 CORRCH_B
     
;

IDDD::=INT2:tipo IDD:idd IGUAL EXP
      |IDD IGUAL EXP
      |IDD MASMAS
      |IDD MENOSMENOS
;

INT2 ::= INT:in
{:
RESULT =in;
:}
      |CHARR:ch
{:
RESULT =ch;
:}
      |DOUB:duu
{:
RESULT =duu;
:}      
;

DO ::= DOO CORRCH_A CONTENIDOMETODO3 CORRCH_B WHIL PAR_A CONDICION PAR_B 
;

WHILE ::= WHIL PAR_A CONDICION PAR_B CORRCH_A CONTENIDOMETODO3 CORRCH_B
       
;

METODODATO::= TIPOD:td IDD:id ASIGNAR PUNTOCOMA
            {:
            :}
            |IDD ASIGNAR PUNTOCOMA
            |FINA TIPOD:tip IDD:id ASIGNAR PUNTOCOMA
            {:
            :}
            |IDD IDD IGUAL NEWW IDD PAR_A PAR_B PUNTOCOMA   
            |IDD MAS IGUAL EXP PUNTOCOMA 
            |IDD MENOS IGUAL EXP PUNTOCOMA
            |IDD MODULO IGUAL EXP PUNTOCOMA 
            |IDD POR IGUAL EXP PUNTOCOMA 
            |IDD DIVIDIR IGUAL EXP PUNTOCOMA             
;

IIFF ::= IFF PAR_A CONDICION PAR_B CORRCH_A CONTENIDOMETODO3 CORRCH_B ELSEI3   
    
;

ELSEI3 ::= ELSEI 
        |ELSE1
        |ELSEI2
        |VACIO
;

ELSEI2::= ELSEI ELSE1
         VACIO
;

ELSEI ::= ELSEI ELSE
        |ELSE
;

ELSE ::= ELS IFF PAR_A CONDICION PAR_B CORRCH_A CONTENIDOMETODO3 CORRCH_B 
      
;


ELSE1 ::= ELSE1 ELSE2
        |ELSE2
;

ELSE2 ::= ELS CORRCH_A CONTENIDOMETODO3 CORRCH_B
   
;



CONDICION ::= CONDICION OPOI CONDICION2
            |CONDICION2
;



CONDICION2 ::= EXP OP EXP
            |NOTT EXP IGUAL EXP
            |NOTT IDD
            |LLAMADA
            |IDD 
            |FAL   
            |TRU
;

PARAMETROS3::= PARAMETROS:pa {:RESULT = pa;:}
            |VACIO
; 

PARAMETROS ::= PARAMETROS COMA PARAMETROS2
              |PARAMETROS2
;

PARAMETROS2 ::= TIPOD:td IDD:id
{:
          

:}
; 
  
DECLARACIONDATO ::= DECLACADENA ASIGNAR PUNTOCOMA    
                  |FINALSTATIC ASIGNAR PUNTOCOMA 
;

ASIGNAR ::= IGUAL EXP:exp 
        |VACIO
;

DECLACADENA ::= VISIB:vis STATIC:stat TIPOD:tt LISTAID 
{:
vartipoc.contenido=tt;

if(!vis.equals("")&&!stat.equals("")){
   contclase.nodo.add(varc);
   varc.contenido ="Variable";
   varstatc.contenido= stat;
   listavar.contenido= "Lista Variables";
   varvisc.contenido = vis;
   varc.nodo.add(varvisc);
   
   varc.nodo.add(varstatc);
   varc.nodo.add(vartipoc);

   varc.nodo.add(listavar);
 
}
else if(!vis.equals("")){
   contclase.nodo.add(varc);
   varvisc.contenido = vis;
   varc.contenido ="Variable";  
   listavar.contenido= "Lista Variables";
   varc.nodo.add(varvisc);
   varc.nodo.add(vartipoc);

   varc.nodo.add(listavar);
 
}
else if(!stat.equals("")){
   contclase.nodo.add(varc);
   varstatc.contenido= stat;
   listavar.contenido= "Lista Variables";
   varc.contenido ="Variable";
   varc.nodo.add(varstatc); 
   varc.nodo.add(vartipoc);

   varc.nodo.add(listavar); 
   
}else{
listavar.contenido= "Lista Variables";
   contclase.nodo.add(varc);
   varc.contenido ="Variable"; 
   varc.nodo.add(vartipoc);
   varc.nodo.add(listavar); 
}

:}
;

FINALSTATIC::=FINAL STATIC:st TIPOD:td LISTAID
{:
if(st.equals("")){
contclase.nodo.add(varc);
varc.contenido ="Variable";
vartipoc.contenido = td;
varc.nodo.add(varfinalc);
varc.nodo.add(vartipoc);

}else{
contclase.nodo.add(varc);
   varc.contenido ="Variable";
vartipoc.contenido = td;
varstatc.contenido="static";

varc.nodo.add(varfinalc);
varc.nodo.add(varstatc);
varc.nodo.add(vartipoc);
}
:}
;

EXP ::= IDD:id                                           
    |NUMERO:id 
    |TEXTO:id 
    |TRU
    |FAL 
    |MENOS NUMID:id 
    |PAR_A EXP PAR_B                 
    |EXP MENOS EXP 
    |EXP MAS EXP
    |EXP POR EXP
    |EXP DIVIDIR EXP
    |EXP MODULO EXP
    |IDD MASMAS   
    |IDD MENOSMENOS
    |MASMAS IDD   
    |MENOSMENOS IDD
    |TEXTO1   
;

NUMID ::= IDD:id {:RESULT = id;:}
        |NUMERO:num {:RESULT = num;:}
;


LISTAID ::=LISTAID COMA LISTAID2 
        |LISTAID2 
;

LISTAID2 ::= IDD:id 
{:
Nodo nuevav = new Nodo();
nuevav.contenido = id;
listavar.nodo.add(nuevav);
:}
;

IMPORT ::= IMPORT IMPORT2
{: 
nodolista1.nodo.add(nodonombre);
:}

        |IMPORT2:im2 {: nodolista1.nodo.add(nodonombre); :}
;
       
IMPORT2 ::= IMP NOMBREIMP:nom PUNTOCOMA
{:
nodonombre.contenido = nom; 
:}       
;

NOMBREIMP ::= CADENAIMP:cad {: RESULT = cad; :}
            |CADENAIMP:cad PUNTO POR {: RESULT = cad+".*"; :}
;

CADENAIMP ::= CADENAIMP:cad PUNTO IDD:id {: RESULT = cad+"."+id; :}
            |IDD:id {: RESULT=id; :}
;

TIPOD ::= STRINGG:st {: RESULT = st; :}
        |BOOL:bo     {: RESULT = bo; :}
        |DOUB:du     {: RESULT = du; :}
        |INT:in      {: RESULT = in; :}
        |CHARR:ch    {: RESULT = ch; :}
        
;

VOID ::= VOIDD
;

OPOI ::= ANDD
      |ORR
;

VISIB ::= PUB:pu {:RESULT = pu;:}
       |PRIV:pri {:RESULT = pri;:}
       |PROTEC:pro {:RESULT = pro;:}
       |VACIO {:RESULT = "";:}
;

FINAL ::= FINA {:varfinalc.contenido = "final";:}
        
;

STATIC ::= STAT {:RESULT = "static";:}
        |VACIO {:RESULT = "";:}
;

VACIO::=;

OP ::= IGUALIGUAL
    |DIFERENTE
    |MENORR
    |MENORRIGUAL    
    |MAYORR
    |MAYORRIGUAL
;