
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package compi;

import java_cup.runtime.Symbol;
import java.awt.List;
import java.util.ArrayList;
import java.util.Stack;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\225\000\002\002\004\000\002\117\002\000\002\002" +
    "\004\000\002\120\002\000\002\007\006\000\002\007\003" +
    "\000\002\007\004\000\002\007\004\000\002\003\004\000" +
    "\002\003\003\000\002\053\004\000\002\053\003\000\002" +
    "\006\010\000\002\035\004\000\002\035\003\000\002\016" +
    "\003\000\002\016\003\000\002\027\014\000\002\064\005" +
    "\000\002\064\004\000\002\005\007\000\002\110\003\000" +
    "\002\110\003\000\002\111\004\000\002\111\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\004\000\002\033\004\000" +
    "\002\033\004\000\002\033\004\000\002\052\013\000\002" +
    "\056\010\000\002\067\003\000\002\067\003\000\002\070" +
    "\005\000\002\070\004\000\002\057\010\000\002\060\005" +
    "\000\002\060\003\000\002\061\003\000\002\055\011\000" +
    "\002\115\003\000\002\115\003\000\002\116\004\000\002" +
    "\116\003\000\002\107\003\000\002\107\003\000\002\107" +
    "\003\000\002\062\006\000\002\062\005\000\002\051\015" +
    "\000\002\037\006\000\002\037\005\000\002\037\004\000" +
    "\002\037\004\000\002\071\003\000\002\071\003\000\002" +
    "\071\003\000\002\050\012\000\002\047\011\000\002\040" +
    "\006\000\002\040\005\000\002\040\007\000\002\040\012" +
    "\000\002\034\012\000\002\114\003\000\002\114\003\000" +
    "\002\114\003\000\002\114\003\000\002\121\002\000\002" +
    "\113\006\000\002\112\004\000\002\112\003\000\002\045" +
    "\012\000\002\054\003\000\002\046\006\000\002\032\003" +
    "\000\002\032\003\000\002\030\005\000\002\030\003\000" +
    "\002\031\004\000\002\017\005\000\002\017\005\000\002" +
    "\026\004\000\002\026\003\000\002\025\006\000\002\043" +
    "\006\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\003\000\002\023\004\000\002\023" +
    "\005\000\002\023\004\000\002\023\005\000\002\023\004" +
    "\000\002\023\003\000\002\023\004\000\002\023\004\000" +
    "\002\023\005\000\002\023\004\000\002\023\003\000\002" +
    "\103\003\000\002\103\003\000\002\022\005\000\002\022" +
    "\003\000\002\101\003\000\002\076\004\000\002\076\003" +
    "\000\002\077\005\000\002\075\003\000\002\075\005\000" +
    "\002\074\005\000\002\074\003\000\002\104\003\000\002" +
    "\104\003\000\002\104\003\000\002\104\003\000\002\104" +
    "\003\000\002\004\003\000\002\106\003\000\002\106\003" +
    "\000\002\100\003\000\002\100\003\000\002\100\003\000" +
    "\002\100\003\000\002\102\003\000\002\102\003\000\002" +
    "\020\002\000\002\105\003\000\002\105\003\000\002\105" +
    "\003\000\002\105\003\000\002\105\003\000\002\105\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0115\000\020\003\000\004\000\006\000\047\000\050" +
    "\000\051\000\070\000\001\002\000\020\003\020\004\016" +
    "\006\uff73\047\023\050\012\051\021\070\017\001\002\000" +
    "\004\002\006\001\002\000\004\002\001\001\002\000\014" +
    "\004\uff87\006\uff87\047\uff87\050\uff87\051\uff87\001\002\000" +
    "\004\002\ufffc\001\002\000\004\002\uffff\001\002\000\020" +
    "\006\uff77\041\uff77\042\uff77\043\uff77\044\uff77\046\uff77\052" +
    "\uff77\001\002\000\004\006\045\001\002\000\020\006\uff76" +
    "\041\uff76\042\uff76\043\uff76\044\uff76\046\uff76\052\uff76\001" +
    "\002\000\004\020\ufffe\001\002\000\004\076\033\001\002" +
    "\000\004\076\031\001\002\000\006\016\027\020\030\001" +
    "\002\000\020\006\uff78\041\uff78\042\uff78\043\uff78\044\uff78" +
    "\046\uff78\052\uff78\001\002\000\014\004\016\006\uff73\047" +
    "\023\050\012\051\021\001\002\000\020\006\uff79\041\uff79" +
    "\042\uff79\043\uff79\044\uff79\046\uff79\052\uff79\001\002\000" +
    "\006\002\ufff8\020\ufff6\001\002\000\004\002\ufff9\001\002" +
    "\000\014\004\uff88\006\uff88\047\uff88\050\uff88\051\uff88\001" +
    "\002\000\004\002\ufffa\001\002\000\004\002\ufffb\001\002" +
    "\000\004\020\ufff7\001\002\000\004\020\040\001\002\000" +
    "\006\020\uff82\021\uff82\001\002\000\006\020\uff85\021\035" +
    "\001\002\000\006\036\037\076\036\001\002\000\006\020" +
    "\uff83\021\uff83\001\002\000\004\020\uff84\001\002\000\014" +
    "\004\uff86\006\uff86\047\uff86\050\uff86\051\uff86\001\002\000" +
    "\004\020\042\001\002\000\014\004\016\006\uff73\047\023" +
    "\050\012\051\021\001\002\000\004\002\ufffd\001\002\000" +
    "\004\002\ufff8\001\002\000\004\076\046\001\002\000\004" +
    "\015\047\001\002\000\026\041\uff73\042\uff73\043\uff73\044" +
    "\uff73\046\uff73\047\023\050\012\051\021\052\uff73\053\055" +
    "\001\002\000\030\016\ufff3\041\ufff3\042\ufff3\043\ufff3\044" +
    "\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3" +
    "\001\002\000\006\020\uff73\102\151\001\002\000\006\020" +
    "\uff73\102\151\001\002\000\016\041\uff73\042\uff73\043\uff73" +
    "\044\uff73\046\uff73\052\064\001\002\000\030\016\ufff2\041" +
    "\ufff2\042\ufff2\043\ufff2\044\ufff2\046\ufff2\047\ufff2\050\ufff2" +
    "\051\ufff2\052\ufff2\053\ufff2\001\002\000\016\041\uff73\042" +
    "\uff73\043\uff73\044\uff73\046\uff73\052\064\001\002\000\030" +
    "\016\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\046\ufff1\047" +
    "\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\001\002\000\030" +
    "\016\061\041\uff73\042\uff73\043\uff73\044\uff73\046\uff73\047" +
    "\023\050\012\051\021\052\uff73\053\055\001\002\000\030" +
    "\016\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\046\ufff4\047" +
    "\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\001\002\000\006" +
    "\002\ufff5\020\ufff5\001\002\000\014\041\072\042\066\043" +
    "\070\044\065\046\067\001\002\000\014\041\uff74\042\uff74" +
    "\043\uff74\044\uff74\046\uff74\001\002\000\014\041\uff75\042" +
    "\uff75\043\uff75\044\uff75\046\uff75\001\002\000\004\076\uff7f" +
    "\001\002\000\004\076\uff7d\001\002\000\004\076\uff81\001" +
    "\002\000\004\076\uff80\001\002\000\004\076\073\001\002" +
    "\000\004\076\uff7e\001\002\000\010\017\uff89\020\uff89\102" +
    "\uff89\001\002\000\010\017\076\020\uffa4\102\uffa4\001\002" +
    "\000\010\017\uff8a\020\uff8a\102\uff8a\001\002\000\004\076" +
    "\073\001\002\000\010\017\uff8b\020\uff8b\102\uff8b\001\002" +
    "\000\014\041\072\042\066\043\070\044\065\046\067\001" +
    "\002\000\004\076\102\001\002\000\012\013\104\017\uff89" +
    "\020\uff89\102\uff89\001\002\000\010\017\076\020\uffa5\102" +
    "\uffa5\001\002\000\016\014\uff73\041\072\042\066\043\070" +
    "\044\065\046\067\001\002\000\004\014\uffad\001\002\000" +
    "\004\076\u0113\001\002\000\004\014\114\001\002\000\006" +
    "\014\uffab\017\uffab\001\002\000\006\014\uffae\017\112\001" +
    "\002\000\014\041\072\042\066\043\070\044\065\046\067" +
    "\001\002\000\006\014\uffac\017\uffac\001\002\000\004\015" +
    "\115\001\002\000\044\003\137\016\uff73\041\072\042\066" +
    "\043\070\044\065\046\067\053\144\054\120\055\142\056" +
    "\136\062\124\063\116\066\132\067\140\076\121\106\127" +
    "\001\002\000\004\013\u010d\001\002\000\050\003\uffe2\016" +
    "\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\046\uffe2\053\uffe2" +
    "\054\uffe2\055\uffe2\056\uffe2\060\uffe2\061\uffe2\062\uffe2\063" +
    "\uffe2\066\uffe2\067\uffe2\076\uffe2\106\uffe2\001\002\000\032" +
    "\011\170\012\166\013\155\020\u010a\032\171\035\160\075" +
    "\165\076\161\101\157\103\156\104\162\105\164\001\002" +
    "\000\014\013\uff73\020\uff73\021\225\076\u0100\102\151\001" +
    "\002\000\050\003\uffe6\016\uffe6\041\uffe6\042\uffe6\043\uffe6" +
    "\044\uffe6\046\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\060" +
    "\uffe6\061\uffe6\062\uffe6\063\uffe6\066\uffe6\067\uffe6\076\uffe6" +
    "\106\uffe6\001\002\000\050\003\uffe1\016\uffe1\041\uffe1\042" +
    "\uffe1\043\uffe1\044\uffe1\046\uffe1\053\uffe1\054\uffe1\055\uffe1" +
    "\056\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\066\uffe1\067" +
    "\uffe1\076\uffe1\106\uffe1\001\002\000\004\013\352\001\002" +
    "\000\050\003\uffe3\016\uffe3\041\uffe3\042\uffe3\043\uffe3\044" +
    "\uffe3\046\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\060\uffe3" +
    "\061\uffe3\062\uffe3\063\uffe3\066\uffe3\067\uffe3\076\uffe3\106" +
    "\uffe3\001\002\000\004\076\347\001\002\000\004\020\346" +
    "\001\002\000\050\003\uffe8\016\uffe8\041\uffe8\042\uffe8\043" +
    "\uffe8\044\uffe8\046\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8" +
    "\060\uffe8\061\uffe8\062\uffe8\063\uffe8\066\uffe8\067\uffe8\076" +
    "\uffe8\106\uffe8\001\002\000\050\003\uffe5\016\uffe5\041\uffe5" +
    "\042\uffe5\043\uffe5\044\uffe5\046\uffe5\053\uffe5\054\uffe5\055" +
    "\uffe5\056\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\066\uffe5" +
    "\067\uffe5\076\uffe5\106\uffe5\001\002\000\004\013\322\001" +
    "\002\000\050\003\uffe7\016\uffe7\041\uffe7\042\uffe7\043\uffe7" +
    "\044\uffe7\046\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\060" +
    "\uffe7\061\uffe7\062\uffe7\063\uffe7\066\uffe7\067\uffe7\076\uffe7" +
    "\106\uffe7\001\002\000\004\016\321\001\002\000\050\003" +
    "\uffe9\016\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\046\uffe9" +
    "\053\uffe9\054\uffe9\055\uffe9\056\uffe9\060\uffe9\061\uffe9\062" +
    "\uffe9\063\uffe9\066\uffe9\067\uffe9\076\uffe9\106\uffe9\001\002" +
    "\000\004\013\265\001\002\000\006\016\263\020\264\001" +
    "\002\000\004\015\254\001\002\000\050\003\uffe4\016\uffe4" +
    "\041\uffe4\042\uffe4\043\uffe4\044\uffe4\046\uffe4\053\uffe4\054" +
    "\uffe4\055\uffe4\056\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4" +
    "\066\uffe4\067\uffe4\076\uffe4\106\uffe4\001\002\000\004\020" +
    "\253\001\002\000\010\016\uffeb\060\uffeb\061\uffeb\001\002" +
    "\000\014\041\072\042\066\043\070\044\065\046\067\001" +
    "\002\000\050\003\137\016\uffec\041\072\042\066\043\070" +
    "\044\065\046\067\053\144\054\120\055\142\056\136\060" +
    "\uffec\061\uffec\062\124\063\116\066\132\067\140\076\121" +
    "\106\127\001\002\000\050\003\uffea\016\uffea\041\uffea\042" +
    "\uffea\043\uffea\044\uffea\046\uffea\053\uffea\054\uffea\055\uffea" +
    "\056\uffea\060\uffea\061\uffea\062\uffea\063\uffea\066\uffea\067" +
    "\uffea\076\uffea\106\uffea\001\002\000\004\076\150\001\002" +
    "\000\006\020\uff73\102\151\001\002\000\030\011\170\012" +
    "\166\013\155\032\171\035\160\075\165\076\161\101\157" +
    "\103\156\104\162\105\164\001\002\000\004\020\154\001" +
    "\002\000\004\020\uffa6\001\002\000\050\003\uffbc\016\uffbc" +
    "\041\uffbc\042\uffbc\043\uffbc\044\uffbc\046\uffbc\053\uffbc\054" +
    "\uffbc\055\uffbc\056\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc" +
    "\066\uffbc\067\uffbc\076\uffbc\106\uffbc\001\002\000\030\011" +
    "\170\012\166\013\155\032\171\035\160\075\165\076\161" +
    "\101\157\103\156\104\162\105\164\001\002\000\044\014" +
    "\uffa0\017\uffa0\020\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0" +
    "\026\uffa0\030\uffa0\031\uffa0\033\uffa0\034\uffa0\035\uffa0\036" +
    "\uffa0\040\uffa0\100\uffa0\107\uffa0\001\002\000\044\014\uffa1" +
    "\017\uffa1\020\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026" +
    "\uffa1\030\uffa1\031\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1" +
    "\040\uffa1\100\uffa1\107\uffa1\001\002\000\006\075\246\076" +
    "\250\001\002\000\054\011\227\012\226\013\uff73\014\uffa3" +
    "\017\uffa3\020\uffa3\021\225\022\uffa3\023\uffa3\024\uffa3\025" +
    "\uffa3\026\uffa3\030\uffa3\031\uffa3\033\uffa3\034\uffa3\035\uffa3" +
    "\036\uffa3\040\uffa3\100\uffa3\107\uffa3\001\002\000\044\014" +
    "\uff99\017\uff99\020\uff99\022\uff99\023\uff99\024\uff99\025\uff99" +
    "\026\uff99\030\uff99\031\uff99\033\uff99\034\uff99\035\uff99\036" +
    "\uff99\040\uff99\100\uff99\107\uff99\001\002\000\044\014\uff93" +
    "\017\uff93\020\uff93\022\uff93\023\uff93\024\uff93\025\uff93\026" +
    "\uff93\030\uff93\031\uff93\033\uff93\034\uff93\035\uff93\036\uff93" +
    "\040\uff93\100\uff93\107\uff93\001\002\000\044\014\uff8e\017" +
    "\uff8e\020\uff8e\022\uff8e\023\uff8e\024\uff8e\025\uff8e\026\uff8e" +
    "\030\uff8e\031\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\040" +
    "\uff8e\100\uff8e\107\uff8e\001\002\000\044\014\uffa2\017\uffa2" +
    "\020\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\030" +
    "\uffa2\031\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\040\uffa2" +
    "\100\uffa2\107\uffa2\001\002\000\004\076\224\001\002\000" +
    "\040\020\uffa7\022\203\023\212\024\211\025\174\026\210" +
    "\030\202\031\175\033\204\034\206\035\177\036\201\040" +
    "\205\100\207\107\200\001\002\000\004\076\223\001\002" +
    "\000\030\011\170\012\166\013\155\032\171\035\160\075" +
    "\165\076\161\101\157\103\156\104\162\105\164\001\002" +
    "\000\044\014\uff94\017\uff94\020\uff94\022\203\023\212\024" +
    "\211\025\174\026\210\030\202\031\175\033\204\034\206" +
    "\035\177\036\201\040\205\100\207\107\200\001\002\000" +
    "\030\011\170\012\166\013\155\032\171\035\160\075\165" +
    "\076\161\101\157\103\156\104\162\105\164\001\002\000" +
    "\030\011\uff6d\012\uff6d\013\uff6d\032\uff6d\035\uff6d\075\uff6d" +
    "\076\uff6d\101\uff6d\103\uff6d\104\uff6d\105\uff6d\001\002\000" +
    "\030\011\uff7a\012\uff7a\013\uff7a\032\uff7a\035\uff7a\075\uff7a" +
    "\076\uff7a\101\uff7a\103\uff7a\104\uff7a\105\uff7a\001\002\000" +
    "\030\011\170\012\166\013\155\032\171\035\160\075\165" +
    "\076\161\101\157\103\156\104\162\105\164\001\002\000" +
    "\030\011\170\012\166\013\155\032\171\035\160\075\165" +
    "\076\161\101\157\103\156\104\162\105\164\001\002\000" +
    "\030\011\170\012\166\013\155\032\171\035\160\075\165" +
    "\076\161\101\157\103\156\104\162\105\164\001\002\000" +
    "\030\011\170\012\166\013\155\032\171\035\160\075\165" +
    "\076\161\101\157\103\156\104\162\105\164\001\002\000" +
    "\030\011\uff7b\012\uff7b\013\uff7b\032\uff7b\035\uff7b\075\uff7b" +
    "\076\uff7b\101\uff7b\103\uff7b\104\uff7b\105\uff7b\001\002\000" +
    "\030\011\uff70\012\uff70\013\uff70\032\uff70\035\uff70\075\uff70" +
    "\076\uff70\101\uff70\103\uff70\104\uff70\105\uff70\001\002\000" +
    "\030\011\170\012\166\013\155\032\171\035\160\075\165" +
    "\076\161\101\157\103\156\104\162\105\164\001\002\000" +
    "\030\011\170\012\166\013\155\032\171\035\160\075\165" +
    "\076\161\101\157\103\156\104\162\105\164\001\002\000" +
    "\030\011\170\012\166\013\155\032\171\035\160\075\165" +
    "\076\161\101\157\103\156\104\162\105\164\001\002\000" +
    "\030\011\uff72\012\uff72\013\uff72\032\uff72\035\uff72\075\uff72" +
    "\076\uff72\101\uff72\103\uff72\104\uff72\105\uff72\001\002\000" +
    "\030\011\uff71\012\uff71\013\uff71\032\uff71\035\uff71\075\uff71" +
    "\076\uff71\101\uff71\103\uff71\104\uff71\105\uff71\001\002\000" +
    "\030\011\uff6e\012\uff6e\013\uff6e\032\uff6e\035\uff6e\075\uff6e" +
    "\076\uff6e\101\uff6e\103\uff6e\104\uff6e\105\uff6e\001\002\000" +
    "\030\011\uff6f\012\uff6f\013\uff6f\032\uff6f\035\uff6f\075\uff6f" +
    "\076\uff6f\101\uff6f\103\uff6f\104\uff6f\105\uff6f\001\002\000" +
    "\044\014\uff9d\017\uff9d\020\uff9d\022\uff9d\023\uff9d\024\uff9d" +
    "\025\uff9d\026\uff9d\030\uff9d\031\uff9d\033\uff9d\034\uff9d\035" +
    "\uff9d\036\uff9d\040\uff9d\100\uff9d\107\200\001\002\000\044" +
    "\014\uff9e\017\uff9e\020\uff9e\022\uff9e\023\uff9e\024\uff9e\025" +
    "\uff9e\026\uff9e\030\uff9e\031\uff9e\033\uff9e\034\uff9e\035\uff9e" +
    "\036\uff9e\040\uff9e\100\uff9e\107\200\001\002\000\044\014" +
    "\uff9b\017\uff9b\020\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b" +
    "\026\uff9b\030\uff9b\031\uff9b\033\uff9b\034\206\035\uff9b\036" +
    "\201\040\205\100\uff9b\107\200\001\002\000\044\014\uff9f" +
    "\017\uff9f\020\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026" +
    "\uff9f\030\uff9f\031\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f" +
    "\040\uff9f\100\uff9f\107\200\001\002\000\044\014\uff9a\017" +
    "\uff9a\020\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a" +
    "\030\uff9a\031\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a\040" +
    "\uff9a\100\uff9a\107\uff9a\001\002\000\044\014\uff9c\017\uff9c" +
    "\020\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\030" +
    "\uff9c\031\uff9c\033\uff9c\034\206\035\uff9c\036\201\040\205" +
    "\100\uff9c\107\200\001\002\000\044\014\uff90\017\uff90\020" +
    "\uff90\022\203\023\212\024\211\025\174\026\210\030\202" +
    "\031\175\033\204\034\206\035\177\036\201\040\205\100" +
    "\207\107\200\001\002\000\044\014\uff95\017\uff95\020\uff95" +
    "\022\203\023\212\024\211\025\174\026\210\030\202\031" +
    "\175\033\204\034\206\035\177\036\201\040\205\100\207" +
    "\107\200\001\002\000\044\014\uff91\017\uff91\020\uff91\022" +
    "\uff91\023\uff91\024\uff91\025\uff91\026\uff91\030\uff91\031\uff91" +
    "\033\uff91\034\uff91\035\uff91\036\uff91\040\uff91\100\uff91\107" +
    "\uff91\001\002\000\044\014\uff8f\017\uff8f\020\uff8f\022\uff8f" +
    "\023\uff8f\024\uff8f\025\uff8f\026\uff8f\030\uff8f\031\uff8f\033" +
    "\uff8f\034\uff8f\035\uff8f\036\uff8f\040\uff8f\100\uff8f\107\uff8f" +
    "\001\002\000\004\076\245\001\002\000\044\014\uff92\017" +
    "\uff92\020\uff92\022\uff92\023\uff92\024\uff92\025\uff92\026\uff92" +
    "\030\uff92\031\uff92\033\uff92\034\uff92\035\uff92\036\uff92\040" +
    "\uff92\100\uff92\107\uff92\001\002\000\044\014\uff96\017\uff96" +
    "\020\uff96\022\uff96\023\uff96\024\uff96\025\uff96\026\uff96\030" +
    "\uff96\031\uff96\033\uff96\034\uff96\035\uff96\036\uff96\040\uff96" +
    "\100\uff96\107\uff96\001\002\000\006\013\uffda\021\243\001" +
    "\002\000\004\013\233\001\002\000\004\013\uffd9\001\002" +
    "\000\030\011\170\012\166\013\155\032\171\035\160\075" +
    "\165\076\161\101\157\103\156\104\162\105\164\001\002" +
    "\000\006\014\uffd4\017\uffd4\001\002\000\006\014\240\017" +
    "\237\001\002\000\042\014\uffd3\017\uffd3\022\203\023\212" +
    "\024\211\025\174\026\210\030\202\031\175\033\204\034" +
    "\206\035\177\036\201\040\205\100\207\107\200\001\002" +
    "\000\030\011\170\012\166\013\155\032\171\035\160\075" +
    "\165\076\161\101\157\103\156\104\162\105\164\001\002" +
    "\000\004\020\241\001\002\000\112\003\uffd6\014\uffd6\016" +
    "\uffd6\017\uffd6\020\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\026\uffd6\030\uffd6\031\uffd6\033\uffd6\034\uffd6\035\uffd6\036" +
    "\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\046\uffd6" +
    "\053\uffd6\054\uffd6\055\uffd6\056\uffd6\060\uffd6\061\uffd6\062" +
    "\uffd6\063\uffd6\066\uffd6\067\uffd6\076\uffd6\100\uffd6\106\uffd6" +
    "\107\uffd6\001\002\000\006\014\uffd5\017\uffd5\001\002\000" +
    "\004\076\244\001\002\000\006\013\uffd8\021\uffd8\001\002" +
    "\000\006\013\uffd7\021\uffd7\001\002\000\044\014\uff8c\017" +
    "\uff8c\020\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c" +
    "\030\uff8c\031\uff8c\033\uff8c\034\uff8c\035\uff8c\036\uff8c\040" +
    "\uff8c\100\uff8c\107\uff8c\001\002\000\044\014\uff98\017\uff98" +
    "\020\uff98\022\uff98\023\uff98\024\uff98\025\uff98\026\uff98\030" +
    "\uff98\031\uff98\033\uff98\034\uff98\035\uff98\036\uff98\040\uff98" +
    "\100\uff98\107\uff98\001\002\000\044\014\uff8d\017\uff8d\020" +
    "\uff8d\022\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d\030\uff8d" +
    "\031\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d\040\uff8d\100" +
    "\uff8d\107\uff8d\001\002\000\040\014\252\022\203\023\212" +
    "\024\211\025\174\026\210\030\202\031\175\033\204\034" +
    "\206\035\177\036\201\040\205\100\207\107\200\001\002" +
    "\000\044\014\uff97\017\uff97\020\uff97\022\uff97\023\uff97\024" +
    "\uff97\025\uff97\026\uff97\030\uff97\031\uff97\033\uff97\034\uff97" +
    "\035\uff97\036\uff97\040\uff97\100\uff97\107\uff97\001\002\000" +
    "\050\003\uffe0\016\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0" +
    "\046\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\060\uffe0\061" +
    "\uffe0\062\uffe0\063\uffe0\066\uffe0\067\uffe0\076\uffe0\106\uffe0" +
    "\001\002\000\044\003\137\016\uff73\041\072\042\066\043" +
    "\070\044\065\046\067\053\144\054\120\055\142\056\136" +
    "\062\124\063\116\066\132\067\140\076\121\106\127\001" +
    "\002\000\004\016\256\001\002\000\004\063\257\001\002" +
    "\000\004\013\260\001\002\000\030\011\170\012\166\013" +
    "\155\032\171\035\160\075\165\076\161\101\157\103\156" +
    "\104\162\105\164\001\002\000\040\014\262\022\203\023" +
    "\212\024\211\025\174\026\210\030\202\031\175\033\204" +
    "\034\206\035\177\036\201\040\205\100\207\107\200\001" +
    "\002\000\050\003\uffc0\016\uffc0\041\uffc0\042\uffc0\043\uffc0" +
    "\044\uffc0\046\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\060" +
    "\uffc0\061\uffc0\062\uffc0\063\uffc0\066\uffc0\067\uffc0\076\uffc0" +
    "\106\uffc0\001\002\000\050\003\uffdd\016\uffdd\041\uffdd\042" +
    "\uffdd\043\uffdd\044\uffdd\046\uffdd\053\uffdd\054\uffdd\055\uffdd" +
    "\056\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\066\uffdd\067" +
    "\uffdd\076\uffdd\106\uffdd\001\002\000\050\003\uffde\016\uffde" +
    "\041\uffde\042\uffde\043\uffde\044\uffde\046\uffde\053\uffde\054" +
    "\uffde\055\uffde\056\uffde\060\uffde\061\uffde\062\uffde\063\uffde" +
    "\066\uffde\067\uffde\076\uffde\106\uffde\001\002\000\030\011" +
    "\170\012\166\013\155\032\171\035\160\075\165\076\161" +
    "\101\157\103\156\104\162\105\164\001\002\000\040\014" +
    "\267\022\203\023\212\024\211\025\174\026\210\030\202" +
    "\031\175\033\204\034\206\035\177\036\201\040\205\100" +
    "\207\107\200\001\002\000\004\015\270\001\002\000\044" +
    "\003\137\016\uff73\041\072\042\066\043\070\044\065\046" +
    "\067\053\144\054\120\055\142\056\136\062\124\063\116" +
    "\066\132\067\140\076\121\106\127\001\002\000\004\016" +
    "\272\001\002\000\052\003\uff73\016\uff73\041\uff73\042\uff73" +
    "\043\uff73\044\uff73\046\uff73\053\uff73\054\uff73\055\uff73\056" +
    "\uff73\057\275\060\uff73\061\uff73\062\uff73\063\uff73\066\uff73" +
    "\067\uff73\076\uff73\106\uff73\001\002\000\050\003\uffba\016" +
    "\uffba\041\uffba\042\uffba\043\uffba\044\uffba\046\uffba\053\uffba" +
    "\054\uffba\055\uffba\056\uffba\060\uffba\061\uffba\062\uffba\063" +
    "\uffba\066\uffba\067\uffba\076\uffba\106\uffba\001\002\000\050" +
    "\003\uffb7\016\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\046" +
    "\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\060\uffb7\061\uffb7" +
    "\062\uffb7\063\uffb7\066\uffb7\067\uffb7\076\uffb7\106\uffb7\001" +
    "\002\000\006\015\307\056\310\001\002\000\052\003\uffb2" +
    "\016\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\046\uffb2\053" +
    "\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2" +
    "\062\uffb2\063\uffb2\066\uffb2\067\uffb2\076\uffb2\106\uffb2\001" +
    "\002\000\052\003\uffb9\016\uffb9\041\uffb9\042\uffb9\043\uffb9" +
    "\044\uffb9\046\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057" +
    "\275\060\uffb9\061\uffb9\062\uffb9\063\uffb9\066\uffb9\067\uffb9" +
    "\076\uffb9\106\uffb9\001\002\000\050\003\uffb0\016\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\044\uffb0\046\uffb0\053\uffb0\054\uffb0" +
    "\055\uffb0\056\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0\066" +
    "\uffb0\067\uffb0\076\uffb0\106\uffb0\001\002\000\050\003\uffb8" +
    "\016\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\046\uffb8\053" +
    "\uffb8\054\uffb8\055\uffb8\056\uffb8\060\uffb8\061\uffb8\062\uffb8" +
    "\063\uffb8\066\uffb8\067\uffb8\076\uffb8\106\uffb8\001\002\000" +
    "\050\003\uffb6\016\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6" +
    "\046\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\060\uffb6\061" +
    "\uffb6\062\uffb6\063\uffb6\066\uffb6\067\uffb6\076\uffb6\106\uffb6" +
    "\001\002\000\052\003\uffb3\016\uffb3\041\uffb3\042\uffb3\043" +
    "\uffb3\044\uffb3\046\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3" +
    "\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\066\uffb3\067" +
    "\uffb3\076\uffb3\106\uffb3\001\002\000\050\003\uffb5\016\uffb5" +
    "\041\uffb5\042\uffb5\043\uffb5\044\uffb5\046\uffb5\053\uffb5\054" +
    "\uffb5\055\uffb5\056\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5" +
    "\066\uffb5\067\uffb5\076\uffb5\106\uffb5\001\002\000\050\003" +
    "\uff73\016\uff73\041\uff73\042\uff73\043\uff73\044\uff73\046\uff73" +
    "\053\uff73\054\uff73\055\uff73\056\uff73\060\uff73\061\uff73\062" +
    "\uff73\063\uff73\066\uff73\067\uff73\076\uff73\106\uff73\001\002" +
    "\000\050\003\uffb4\016\uffb4\041\uffb4\042\uffb4\043\uffb4\044" +
    "\uffb4\046\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\060\uffb4" +
    "\061\uffb4\062\uffb4\063\uffb4\066\uffb4\067\uffb4\076\uffb4\106" +
    "\uffb4\001\002\000\044\003\137\016\uff73\041\072\042\066" +
    "\043\070\044\065\046\067\053\144\054\120\055\142\056" +
    "\136\062\124\063\116\066\132\067\140\076\121\106\127" +
    "\001\002\000\004\013\311\001\002\000\030\011\170\012" +
    "\166\013\155\032\171\035\160\075\165\076\161\101\157" +
    "\103\156\104\162\105\164\001\002\000\040\014\313\022" +
    "\203\023\212\024\211\025\174\026\210\030\202\031\175" +
    "\033\204\034\206\035\177\036\201\040\205\100\207\107" +
    "\200\001\002\000\004\015\314\001\002\000\044\003\137" +
    "\016\uff73\041\072\042\066\043\070\044\065\046\067\053" +
    "\144\054\120\055\142\056\136\062\124\063\116\066\132" +
    "\067\140\076\121\106\127\001\002\000\004\016\316\001" +
    "\002\000\052\003\uffb1\016\uffb1\041\uffb1\042\uffb1\043\uffb1" +
    "\044\uffb1\046\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057" +
    "\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\066\uffb1\067\uffb1" +
    "\076\uffb1\106\uffb1\001\002\000\004\016\320\001\002\000" +
    "\050\003\uffaf\016\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf" +
    "\046\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\060\uffaf\061" +
    "\uffaf\062\uffaf\063\uffaf\066\uffaf\067\uffaf\076\uffaf\106\uffaf" +
    "\001\002\000\030\016\ufff0\041\ufff0\042\ufff0\043\ufff0\044" +
    "\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0" +
    "\001\002\000\030\011\170\012\166\013\155\032\171\035" +
    "\160\075\165\076\161\101\157\103\156\104\162\105\164" +
    "\001\002\000\040\014\324\022\203\023\212\024\211\025" +
    "\174\026\210\030\202\031\175\033\204\034\206\035\177" +
    "\036\201\040\205\100\207\107\200\001\002\000\004\015" +
    "\325\001\002\000\010\016\uff73\060\327\061\332\001\002" +
    "\000\010\016\uffce\060\uffce\061\uffce\001\002\000\004\065" +
    "\344\001\002\000\010\016\uffd1\060\327\061\332\001\002" +
    "\000\004\016\342\001\002\000\010\075\335\101\334\105" +
    "\337\001\002\000\004\016\uffd0\001\002\000\004\065\uffcc" +
    "\001\002\000\004\065\uffcb\001\002\000\004\065\340\001" +
    "\002\000\004\065\uffcd\001\002\000\050\003\137\016\uff73" +
    "\041\072\042\066\043\070\044\065\046\067\053\144\054" +
    "\120\055\142\056\136\060\uff73\061\uff73\062\124\063\116" +
    "\066\132\067\140\076\121\106\127\001\002\000\010\016" +
    "\uffca\060\uffca\061\uffca\001\002\000\050\003\uffd2\016\uffd2" +
    "\041\uffd2\042\uffd2\043\uffd2\044\uffd2\046\uffd2\053\uffd2\054" +
    "\uffd2\055\uffd2\056\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2" +
    "\066\uffd2\067\uffd2\076\uffd2\106\uffd2\001\002\000\010\016" +
    "\uffcf\060\uffcf\061\uffcf\001\002\000\050\003\137\016\uff73" +
    "\041\072\042\066\043\070\044\065\046\067\053\144\054" +
    "\120\055\142\056\136\060\uff73\061\uff73\062\124\063\116" +
    "\066\132\067\140\076\121\106\127\001\002\000\010\016" +
    "\uffc9\060\uffc9\061\uffc9\001\002\000\050\003\uffdf\016\uffdf" +
    "\041\uffdf\042\uffdf\043\uffdf\044\uffdf\046\uffdf\053\uffdf\054" +
    "\uffdf\055\uffdf\056\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf" +
    "\066\uffdf\067\uffdf\076\uffdf\106\uffdf\001\002\000\006\020" +
    "\uff73\102\151\001\002\000\004\020\351\001\002\000\050" +
    "\003\uffbe\016\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\046" +
    "\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\060\uffbe\061\uffbe" +
    "\062\uffbe\063\uffbe\066\uffbe\067\uffbe\076\uffbe\106\uffbe\001" +
    "\002\000\012\041\360\042\357\044\353\076\356\001\002" +
    "\000\004\076\uffc1\001\002\000\004\076\375\001\002\000" +
    "\004\020\365\001\002\000\010\011\362\012\361\102\363" +
    "\001\002\000\004\076\uffc2\001\002\000\004\076\uffc3\001" +
    "\002\000\006\014\uffc4\020\uffc4\001\002\000\006\014\uffc5" +
    "\020\uffc5\001\002\000\030\011\170\012\166\013\155\032" +
    "\171\035\160\075\165\076\161\101\157\103\156\104\162" +
    "\105\164\001\002\000\042\014\uffc6\020\uffc6\022\203\023" +
    "\212\024\211\025\174\026\210\030\202\031\175\033\204" +
    "\034\206\035\177\036\201\040\205\100\207\107\200\001" +
    "\002\000\030\011\170\012\166\013\155\032\171\035\160" +
    "\075\165\076\161\101\157\103\156\104\162\105\164\001" +
    "\002\000\040\020\367\022\203\023\212\024\211\025\174" +
    "\026\210\030\202\031\175\033\204\034\206\035\177\036" +
    "\201\040\205\100\207\107\200\001\002\000\012\041\360" +
    "\042\357\044\353\076\356\001\002\000\004\014\371\001" +
    "\002\000\004\015\372\001\002\000\044\003\137\016\uff73" +
    "\041\072\042\066\043\070\044\065\046\067\053\144\054" +
    "\120\055\142\056\136\062\124\063\116\066\132\067\140" +
    "\076\121\106\127\001\002\000\004\016\374\001\002\000" +
    "\050\003\uffc8\016\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8" +
    "\046\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\060\uffc8\061" +
    "\uffc8\062\uffc8\063\uffc8\066\uffc8\067\uffc8\076\uffc8\106\uffc8" +
    "\001\002\000\004\102\376\001\002\000\030\011\170\012" +
    "\166\013\155\032\171\035\160\075\165\076\161\101\157" +
    "\103\156\104\162\105\164\001\002\000\042\014\uffc7\020" +
    "\uffc7\022\203\023\212\024\211\025\174\026\210\030\202" +
    "\031\175\033\204\034\206\035\177\036\201\040\205\100" +
    "\207\107\200\001\002\000\004\102\u0104\001\002\000\004" +
    "\020\u0103\001\002\000\006\013\uffd9\020\uffa6\001\002\000" +
    "\050\003\uffbd\016\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd" +
    "\046\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\060\uffbd\061" +
    "\uffbd\062\uffbd\063\uffbd\066\uffbd\067\uffbd\076\uffbd\106\uffbd" +
    "\001\002\000\004\010\u0105\001\002\000\004\076\u0106\001" +
    "\002\000\004\013\u0107\001\002\000\004\014\u0108\001\002" +
    "\000\004\020\u0109\001\002\000\050\003\uffbb\016\uffbb\041" +
    "\uffbb\042\uffbb\043\uffbb\044\uffbb\046\uffbb\053\uffbb\054\uffbb" +
    "\055\uffbb\056\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\066" +
    "\uffbb\067\uffbb\076\uffbb\106\uffbb\001\002\000\050\003\uffee" +
    "\016\uffee\041\uffee\042\uffee\043\uffee\044\uffee\046\uffee\053" +
    "\uffee\054\uffee\055\uffee\056\uffee\060\uffee\061\uffee\062\uffee" +
    "\063\uffee\066\uffee\067\uffee\076\uffee\106\uffee\001\002\000" +
    "\040\020\u010c\022\203\023\212\024\211\025\174\026\210" +
    "\030\202\031\175\033\204\034\206\035\177\036\201\040" +
    "\205\100\207\107\200\001\002\000\050\003\uffef\016\uffef" +
    "\041\uffef\042\uffef\043\uffef\044\uffef\046\uffef\053\uffef\054" +
    "\uffef\055\uffef\056\uffef\060\uffef\061\uffef\062\uffef\063\uffef" +
    "\066\uffef\067\uffef\076\uffef\106\uffef\001\002\000\030\011" +
    "\170\012\166\013\155\032\171\035\160\075\165\076\161" +
    "\101\157\103\156\104\162\105\164\001\002\000\040\014" +
    "\u010f\022\203\023\212\024\211\025\174\026\210\030\202" +
    "\031\175\033\204\034\206\035\177\036\201\040\205\100" +
    "\207\107\200\001\002\000\004\015\u0110\001\002\000\044" +
    "\003\137\016\uff73\041\072\042\066\043\070\044\065\046" +
    "\067\053\144\054\120\055\142\056\136\062\124\063\116" +
    "\066\132\067\140\076\121\106\127\001\002\000\004\016" +
    "\u0112\001\002\000\050\003\uffbf\016\uffbf\041\uffbf\042\uffbf" +
    "\043\uffbf\044\uffbf\046\uffbf\053\uffbf\054\uffbf\055\uffbf\056" +
    "\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\066\uffbf\067\uffbf" +
    "\076\uffbf\106\uffbf\001\002\000\006\014\uffaa\017\uffaa\001" +
    "\002\000\004\020\u0115\001\002\000\030\016\uffa9\041\uffa9" +
    "\042\uffa9\043\uffa9\044\uffa9\046\uffa9\047\uffa9\050\uffa9\051" +
    "\uffa9\052\uffa9\053\uffa9\001\002\000\004\020\u0117\001\002" +
    "\000\030\016\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\046" +
    "\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0115\000\006\002\004\117\003\001\001\000\022\003" +
    "\007\006\023\007\010\020\013\053\014\076\021\077\006" +
    "\100\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\120" +
    "\040\001\001\000\006\074\033\075\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\024\020\013\077\025\100\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\042\006\043\020\013\076" +
    "\021\077\006\100\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\016" +
    "\047\017\053\020\013\025\051\027\055\035\056\043\050" +
    "\100\052\001\001\000\002\001\001\000\006\020\152\026" +
    "\u0115\001\001\000\006\020\152\026\u0113\001\001\000\006" +
    "\020\062\102\077\001\001\000\002\001\001\000\006\020" +
    "\062\102\061\001\001\000\002\001\001\000\020\016\057" +
    "\017\053\020\013\025\051\027\055\043\050\100\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\104\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\073\101\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\101\076\001\001\000\002\001\001\000\004\104\100\001" +
    "\001\000\006\022\102\101\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\020\104\030\110\031\107\032" +
    "\106\104\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\031\112\104\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\020\142\033\134\034\132\040\127\047" +
    "\121\050\130\051\140\055\124\057\116\064\122\104\125" +
    "\110\133\111\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\u010a\057\162\001\001\000\012\020\u0101" +
    "\026\u0100\067\230\070\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\104\146\001\001\000\026\033\145\034" +
    "\132\040\127\047\121\050\130\051\140\055\124\057\116" +
    "\064\122\104\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\152\026\151\001\001\000\006\023\166" +
    "\057\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\250\057\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\103\246\001\001\000" +
    "\010\020\231\067\230\070\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\105\172\106\175\001\001\000\002" +
    "\001\001\000\006\023\171\057\162\001\001\000\006\105" +
    "\172\106\175\001\001\000\006\023\221\057\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\220\057" +
    "\162\001\001\000\006\023\217\057\162\001\001\000\006" +
    "\023\216\057\162\001\001\000\006\023\215\057\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\214" +
    "\057\162\001\001\000\006\023\213\057\162\001\001\000" +
    "\006\023\212\057\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\105" +
    "\172\106\175\001\001\000\006\105\172\106\175\001\001" +
    "\000\006\105\172\106\175\001\001\000\006\105\172\106" +
    "\175\001\001\000\006\105\172\106\175\001\001\000\006" +
    "\105\172\106\175\001\001\000\006\105\172\106\175\001" +
    "\001\000\006\105\172\106\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\023\235\057\162\060\234\061\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\105\172" +
    "\106\175\001\001\000\010\023\235\057\162\061\241\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\105\172\106\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\020\142\033\134\034\132\040\127\047\121" +
    "\050\130\051\140\055\124\057\116\064\122\104\125\110" +
    "\254\111\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\260\057\162\001\001\000" +
    "\006\105\172\106\175\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\265\057\162\001" +
    "\001\000\006\105\172\106\175\001\001\000\002\001\001" +
    "\000\034\020\142\033\134\034\132\040\127\047\121\050" +
    "\130\051\140\055\124\057\116\064\122\104\125\110\270" +
    "\111\144\001\001\000\002\001\001\000\020\020\301\045" +
    "\275\046\277\054\300\112\276\113\273\114\272\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\045\302\046\277\054\303\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\304\001\001\000\004\020\305" +
    "\001\001\000\002\001\001\000\034\020\142\033\134\034" +
    "\132\040\127\047\121\050\130\051\140\055\124\057\116" +
    "\064\122\104\125\110\316\111\144\001\001\000\002\001" +
    "\001\000\006\023\311\057\162\001\001\000\006\105\172" +
    "\106\175\001\001\000\002\001\001\000\034\020\142\033" +
    "\134\034\132\040\127\047\121\050\130\051\140\055\124" +
    "\057\116\064\122\104\125\110\314\111\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\322\057\162\001" +
    "\001\000\006\105\172\106\175\001\001\000\002\001\001" +
    "\000\012\020\332\062\325\115\330\116\327\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\062\342\001\001" +
    "\000\002\001\001\000\004\107\335\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\020\142\033\134\034\132\040" +
    "\127\047\121\050\130\051\140\055\124\057\116\064\122" +
    "\104\125\110\340\111\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\020\142\033\134" +
    "\034\132\040\127\047\121\050\130\051\140\055\124\057" +
    "\116\064\122\104\125\110\344\111\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\152\026\347\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\037\354" +
    "\071\353\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\363\057\162\001\001\000\006\105\172\106\175\001\001" +
    "\000\006\023\365\057\162\001\001\000\006\105\172\106" +
    "\175\001\001\000\006\037\367\071\353\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\020\142\033\134\034" +
    "\132\040\127\047\121\050\130\051\140\055\124\057\116" +
    "\064\122\104\125\110\372\111\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\376" +
    "\057\162\001\001\000\006\105\172\106\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\105\172\106\175\001\001\000" +
    "\002\001\001\000\006\023\u010d\057\162\001\001\000\006" +
    "\105\172\106\175\001\001\000\002\001\001\000\034\020" +
    "\142\033\134\034\132\040\127\047\121\050\130\051\140" +
    "\055\124\057\116\064\122\104\125\110\u0110\111\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


     
    //Error recovery
    public void syntax_error(Symbol s){
        Errorjv.texto += "Syntax error: " + s.value + " Line " + (s.left+1) + " Col " + ( s.right + 1) +"\n";
        System.out.println("Syntax error: " + s.value + " Line " + (s.left+1) + " Col " + ( s.right + 1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        Errorjv.texto += "Syntax error: " + s.value + " Line " + (s.left+1) + " Col " + ( s.right + 1) +"\n";
        System.out.println("Fatal Syntax Error: "+ s.value + " Linea " + (s.left+1) + " Col " + (s.right + 1) +"\n");
    }
 
    Nodo raiz = new Nodo();   

    public Nodo RegresarNodo(){
    return raiz;
    } 


    Stack<Nodo> pila = new Stack<Nodo>();     
	Nodo nodolist = new Nodo();
    Nodo nodoconclas = new Nodo();
    Nodo nodoconclas2 = new Nodo();
	Nodo listapar = new Nodo();
	Nodo contmet = new Nodo();
	



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


  public String c = "";
  

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Nodo RESULT =null;
raiz.contenido="raiz";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= NT$0 PACKAGE 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 raiz.nodo.add(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PACKAGE ::= PA NT$1 PUNTOCOMA IMPORTCLASS 
            {
              Nodo RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Nodo) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PACKAGE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PACKAGE ::= IMPORTCLASS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PACKAGE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PACKAGE ::= error PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PACKAGE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PACKAGE ::= error CORRCH_B 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PACKAGE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IMPORTCLASS ::= IMPORT CLASS 
            {
              Nodo RESULT =null;
		int impleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int impright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String imp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORTCLASS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IMPORTCLASS ::= CLASS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORTCLASS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PA ::= PACK IDD 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
Nodo nret = new Nodo();
Nodo npac = new Nodo();
Nodo nid = new Nodo();
nret.contenido ="Package";
nid.contenido=id;
npac.contenido="package";

nret.nodo.add(npac);
nret.nodo.add(nid);

RESULT = nret; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PA",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PA ::= CLASS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PA",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CLASS ::= VISIB CLAS IDD CORRCH_A CONTENIDOCLASE2 CORRCH_B 
            {
              Nodo RESULT =null;
		int visleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String vis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int claleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int claright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String cla = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
if(vis.equals("")){
Nodo nclas=new Nodo();
raiz.nodo.add(nclas);

Nodo nid=new Nodo(); 
Nodo nclas2=new Nodo(); 

nclas.contenido="Clase";
nid.contenido=id;
nclas2.contenido="class";

nclas.nodo.add(nclas2);
nclas.nodo.add(nid);
nclas.nodo.add(nodoconclas2);
nodoconclas2=new Nodo();
	
}else{
	Nodo nclas=new Nodo();
raiz.nodo.add(nclas);

Nodo nvis=new Nodo(); 
Nodo nid=new Nodo(); 
Nodo nclas2=new Nodo(); 

nvis.contenido=vis;
nclas.contenido="Clase";
nid.contenido=id;
nclas2.contenido="class";

nclas.nodo.add(nvis);
nclas.nodo.add(nclas2);
nclas.nodo.add(nid);
nclas.nodo.add(nodoconclas2);
nodoconclas2=new Nodo();



}


              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLASS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTENIDOCLASE2 ::= CONTENIDOCLASE2 CONTENIDOCLASE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASE2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTENIDOCLASE2 ::= CONTENIDOCLASE 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASE2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTENIDOCLASE ::= DECLARACIONDATO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTENIDOCLASE ::= DECLAMETODO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLAMETODO ::= VISIB STATIC TIPOD IDD PAR_A PARAMETROS3 PAR_B CORRCH_A CONTENIDOMETODO3 CORRCH_B 
            {
              Nodo RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String vi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String stat = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int parametleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int parametright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo paramet = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int contleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> cont = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
if(!stat.equals("")){

Nodo nmet=new Nodo();

Nodo nvis=new Nodo();
Nodo nstat=new Nodo();
Nodo ntipo=new Nodo();
Nodo nid=new Nodo();
Nodo npar=new Nodo();
Nodo ncont=new Nodo();

nvis.contenido=vi;
nstat.contenido=stat;
ntipo.contenido=td;
nid.contenido=id;
npar.contenido="Lita Parametros";
ncont.contenido="Contenido";
nmet.contenido ="Metodo";

nmet.nodo.add(nvis);
nmet.nodo.add(nstat);
nmet.nodo.add(ntipo);
nmet.nodo.add(nid);

npar.nodo.add(listapar);
listapar=new Nodo();
nmet.nodo.add(npar);


for(Nodo nod : cont){
	
ncont.nodo.add(nod);

}

contmet=new Nodo();
nmet.nodo.add(ncont);
	
nodoconclas2.nodo.add(nmet);
}else{
	Nodo nmet=new Nodo();

Nodo nvis=new Nodo();
Nodo ntipo=new Nodo();
Nodo nid=new Nodo();
Nodo npar=new Nodo();
Nodo ncont=new Nodo();

nvis.contenido=vi;
ntipo.contenido=td;
nid.contenido=id;
npar.contenido="Lita Parametros";
ncont.contenido="Contenido";
nmet.contenido ="Metodo";

nmet.nodo.add(nvis);
nmet.nodo.add(ntipo);
nmet.nodo.add(nid);

npar.nodo.add(listapar);
listapar=new Nodo();
nmet.nodo.add(npar);

for(Nodo nod : cont){
	
ncont.nodo.add(nod);

}

contmet=new Nodo();
nmet.nodo.add(ncont);
nodoconclas2.nodo.add(nmet);

	
}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAMETODO",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // RETURN ::= RET EXP PUNTOCOMA 
            {
              Nodo RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo ex = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
Nodo ret=new Nodo();

ret.contenido = "retorno";
ret.nodo.add(ex);
RESULT = ret;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // RETURN ::= RET PUNTOCOMA 
            {
              Nodo RESULT =null;
		
Nodo ret=new Nodo();

ret.contenido = "retorno";
RESULT = ret;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // MOD ::= IDD MAS IGUAL EXP PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOD",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONTENIDOMETODO3 ::= CONTENIDOMETODO 
            {
              ArrayList<Nodo> RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> con = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = con;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO3",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONTENIDOMETODO3 ::= VACIO 
            {
              ArrayList<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO3",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONTENIDOMETODO ::= CONTENIDOMETODO CONTENIDOMETODO2 
            {
              ArrayList<Nodo> RESULT =null;
		int con1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int con1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> con1 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int con2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int con2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo con2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
con1.add(con2);
RESULT = con1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONTENIDOMETODO ::= CONTENIDOMETODO2 
            {
              ArrayList<Nodo> RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int contright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo cont = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				ArrayList<Nodo> noditos = new ArrayList<Nodo>();
				
				noditos.add(cont);
								
				RESULT=noditos;
				
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTENIDOMETODO2 ::= METODODATO 
            {
              Nodo RESULT =null;
		int mtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo mt = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTENIDOMETODO2 ::= IIFF 
            {
              Nodo RESULT =null;
		int mtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo mt = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONTENIDOMETODO2 ::= WHILE 
            {
              Nodo RESULT =null;
		int mtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo mt = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTENIDOMETODO2 ::= DO 
            {
              Nodo RESULT =null;
		int mtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo mt = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTENIDOMETODO2 ::= FOR 
            {
              Nodo RESULT =null;
		int mtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo mt = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTENIDOMETODO2 ::= SWITCH 
            {
              Nodo RESULT =null;
		int mtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo mt = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTENIDOMETODO2 ::= LLAMADA 
            {
              Nodo RESULT =null;
		int mtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo mt = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTENIDOMETODO2 ::= RETURN 
            {
              Nodo RESULT =null;
		int mtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo mt = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = mt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTENIDOMETODO2 ::= BRE PUNTOCOMA 
            {
              Nodo RESULT =null;
		Nodo ret=new Nodo(); ret.contenido="break"; RESULT =ret;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTENIDOMETODO2 ::= CONT PUNTOCOMA 
            {
              Nodo RESULT =null;
		Nodo ret=new Nodo(); ret.contenido="continue"; RESULT =ret;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONTENIDOMETODO2 ::= error PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONTENIDOMETODO2 ::= error CORRCH_B 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO2",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PRINT ::= CONS PUNTO READL PUNTO WRITEL PAR_A EXP PAR_B PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // THES ::= THE PUNTO IDD IGUAL EXP PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("THES",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LLAMADA2 ::= LLAMADA3 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA2",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LLAMADA2 ::= VACIO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA2",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LLAMADA3 ::= LLAMADA3 PUNTO IDD 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA3",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LLAMADA3 ::= PUNTO IDD 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA3",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LLAMADA ::= IDD LLAMADA2 PAR_A CONTENIDOLLAMADA PAR_B PUNTOCOMA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONTENIDOLLAMADA ::= CONTENIDOLLAMADA COMA CONTENIDOLLAMADA2 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOLLAMADA",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONTENIDOLLAMADA ::= CONTENIDOLLAMADA2 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOLLAMADA",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONTENIDOLLAMADA2 ::= EXP 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOLLAMADA2",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SWITCH ::= SWIT PAR_A EXP PAR_B CORRCH_A CONTENIDOSWITCH2 CORRCH_B 
            {
              Nodo RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo ex = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> con = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
Nodo nret=new Nodo();
Nodo nif=new Nodo();
Nodo ncont=new Nodo();


nret.contenido="Switch";
nif.contenido="switch";
ncont.contenido="Contenido switch";


nret.nodo.add(nif);
nret.nodo.add(ex);


for(Nodo nod : con){
	
ncont.nodo.add(nod);

}

nret.nodo.add(ncont);

RESULT=nret;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONTENIDOSWITCH2 ::= CONTENIDOSWITCH3 
            {
              ArrayList<Nodo> RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> con = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =con; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOSWITCH2",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONTENIDOSWITCH2 ::= VACIO 
            {
              ArrayList<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOSWITCH2",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONTENIDOSWITCH3 ::= CONTENIDOSWITCH3 CONTENIDOSWITCH 
            {
              ArrayList<Nodo> RESULT =null;
		int con1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int con1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> con1 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int con2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int con2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo con2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
con1.add(con2);
RESULT = con1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOSWITCH3",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONTENIDOSWITCH3 ::= CONTENIDOSWITCH 
            {
              ArrayList<Nodo> RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo con = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				ArrayList<Nodo> noditos = new ArrayList<Nodo>();
				
				noditos.add(con);
								
				RESULT=noditos;
				
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOSWITCH3",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // COMILL ::= TEXTO1 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =id;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMILL",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // COMILL ::= TEXTO 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =id;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMILL",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COMILL ::= NUMERO 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =id;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMILL",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONTENIDOSWITCH ::= CAS COMILL DOSPUNTOS CONTENIDOMETODO3 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> con = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
Nodo nret=new Nodo();
Nodo nif=new Nodo();
Nodo ncont=new Nodo();

Nodo nid1=new Nodo();

nret.contenido="Case";
nif.contenido="case";
ncont.contenido="Contenido";

nid1.contenido=id;

nret.nodo.add(nif);
nret.nodo.add(nid1);


for(Nodo nod : con){
	
ncont.nodo.add(nod);

}

nret.nodo.add(ncont);

RESULT=nret;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOSWITCH",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONTENIDOSWITCH ::= DEF DOSPUNTOS CONTENIDOMETODO3 
            {
              Nodo RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> con = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
Nodo nret=new Nodo();
Nodo nif=new Nodo();
Nodo ncont=new Nodo();


nret.contenido="Default";
nif.contenido="default";
ncont.contenido="Contenido";




for(Nodo nod : con){
	
ncont.nodo.add(nod);

}

nret.nodo.add(ncont);

RESULT=nret;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOSWITCH",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FOR ::= FORR PAR_A IDDD PUNTOCOMA EXP PUNTOCOMA IDDD PAR_B CORRCH_A CONTENIDOMETODO3 CORRCH_B 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Nodo id1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Nodo ex = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo id2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> con = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
Nodo nret=new Nodo();
Nodo nif=new Nodo();
Nodo ncont=new Nodo();

Nodo nid1=new Nodo();
Nodo nid2=new Nodo();

nid1.contenido="exp";
nid2.contenido="exp";
nret.contenido="For";
nif.contenido="for";
ncont.contenido="Contenido";

nid1.nodo.add(id1);
nid2.nodo.add(id2);

nret.nodo.add(nif);
nret.nodo.add(nid1);
nret.nodo.add(ex);
nret.nodo.add(nid2);


for(Nodo nod : con){
	
ncont.nodo.add(nod);

}

nret.nodo.add(ncont);

RESULT=nret;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IDDD ::= INT2 IDD IGUAL EXP 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String idd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ex = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
Nodo ret =new Nodo();
Nodo ntipo =new Nodo();
Nodo nid =new Nodo();

ret.contenido ="variable";
ntipo.contenido ="int";
nid.contenido =idd;

ret.nodo.add(ntipo);
ret.nodo.add(nid);
ret.nodo.add(ex);

RESULT = ret;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDDD",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IDDD ::= IDD IGUAL EXP 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ex = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
Nodo ret =new Nodo();
Nodo nid =new Nodo();

ret.contenido ="variable";
nid.contenido =id;

ret.nodo.add(nid);
ret.nodo.add(ex);

RESULT = ret;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDDD",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IDDD ::= IDD MASMAS 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
Nodo ret =new Nodo();
Nodo nid =new Nodo();

ret.contenido ="variable";
nid.contenido =id+"++";

ret.nodo.add(nid);

RESULT = ret;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDDD",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IDDD ::= IDD MENOSMENOS 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
Nodo ret =new Nodo();
Nodo nid =new Nodo();

ret.contenido ="variable";
nid.contenido =id+"--";

ret.nodo.add(nid);

RESULT = ret;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDDD",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INT2 ::= INT 
            {
              Nodo RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INT2",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // INT2 ::= CHARR 
            {
              Nodo RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INT2",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // INT2 ::= DOUB 
            {
              Nodo RESULT =null;
		int duuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int duuright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String duu = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INT2",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DO ::= DOO CORRCH_A CONTENIDOMETODO3 CORRCH_B WHIL PAR_A EXP PAR_B 
            {
              Nodo RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<Nodo> con = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo ex = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
Nodo nret=new Nodo();
Nodo nif=new Nodo();
Nodo ncont=new Nodo();

nret.contenido="Do While";
nif.contenido="do while";
ncont.contenido="Contenido";
nret.nodo.add(nif);

for(Nodo nod : con){
	
ncont.nodo.add(nod);

}


nret.nodo.add(ex);


nret.nodo.add(ncont);

RESULT=nret;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // WHILE ::= WHIL PAR_A EXP PAR_B CORRCH_A CONTENIDOMETODO3 CORRCH_B 
            {
              Nodo RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo ex = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> con = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
Nodo nret=new Nodo();
Nodo nif=new Nodo();
Nodo ncont=new Nodo();

nret.contenido="While";
nif.contenido="while";
ncont.contenido="Contenido";

nret.nodo.add(nif);

nret.nodo.add(ex);

for(Nodo nod : con){
	
ncont.nodo.add(nod);

}


nret.nodo.add(ncont);

RESULT=nret;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // METODODATO ::= TIPOD IDD ASIGNAR PUNTOCOMA 
            {
              Nodo RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int asgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo asg = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
Nodo nvar=new Nodo();
Nodo ntipo=new Nodo();
Nodo nid=new Nodo();
Nodo nasg=new Nodo();

nvar.contenido="Variable";
ntipo.contenido=td;
nid.contenido=id;
nasg.contenido="Asignar";

nasg.nodo.add(asg);

nvar.nodo.add(ntipo);
nvar.nodo.add(nid);
nvar.nodo.add(nasg);

RESULT = nvar;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODODATO",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // METODODATO ::= IDD ASIGNAR PUNTOCOMA 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int asgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo asg = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
Nodo nvar=new Nodo();
Nodo nid=new Nodo();
Nodo nasg=new Nodo();

nvar.contenido="Variable";
nid.contenido=id;
nasg.contenido="Asignar";

nasg.nodo.add(asg);

nvar.nodo.add(nid);
nvar.nodo.add(nasg);

RESULT = nvar;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODODATO",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // METODODATO ::= FINA TIPOD IDD ASIGNAR PUNTOCOMA 
            {
              Nodo RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int asgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo asg = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
Nodo nvar=new Nodo();
Nodo nfn=new Nodo();
Nodo ntipo=new Nodo();
Nodo nid=new Nodo();
Nodo nasg=new Nodo();

nvar.contenido="Variable";
nfn.contenido="final";
ntipo.contenido=td;
nid.contenido=id;
nasg.contenido="Asignar";

nasg.nodo.add(asg);

nvar.nodo.add(nfn);
nvar.nodo.add(ntipo);
nvar.nodo.add(nid);
nvar.nodo.add(nasg);

RESULT = nvar;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODODATO",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // METODODATO ::= IDD IDD IGUAL NEWW IDD PAR_A PAR_B PUNTOCOMA 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
Nodo nvar=new Nodo();
Nodo nid1=new Nodo();
Nodo nid2=new Nodo();
Nodo nnew=new Nodo();
Nodo nid3=new Nodo();

nvar.contenido="Llamada";
nid1.contenido=id1;
nid2.contenido=id2;
nnew.contenido="new";
nid3.contenido=id3;

nvar.nodo.add(nid1);
nvar.nodo.add(nid2);
nvar.nodo.add(nnew);
nvar.nodo.add(nid3);

RESULT = nvar;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODODATO",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IIFF ::= IFF PAR_A EXP PAR_B CORRCH_A CONTENIDOMETODO3 CORRCH_B ELSEI3 
            {
              Nodo RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo ex = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Nodo> con = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> els = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
Nodo nret=new Nodo();
Nodo nif=new Nodo();
Nodo ncont=new Nodo();
Nodo nel=new Nodo();


nret.contenido="IF";
nif.contenido="if";
ncont.contenido="Contenido";
nel.contenido="Else";

nret.nodo.add(nif);

nret.nodo.add(ex);

for(Nodo nod : con){
	
ncont.nodo.add(nod);

}

for(Nodo nod : els){
	
nel.nodo.add(nod);

}

nret.nodo.add(ncont);
nret.nodo.add(nel);

RESULT=nret;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IIFF",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ELSEI3 ::= ELSEI 
            {
              ArrayList<Nodo> RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> con = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=con;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSEI3",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ELSEI3 ::= ELSE1 
            {
              ArrayList<Nodo> RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo con = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Nodo> noditos = new ArrayList<Nodo>();noditos.add(con); RESULT = noditos;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSEI3",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ELSEI3 ::= ELSEI2 
            {
              ArrayList<Nodo> RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> con = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=con;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSEI3",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ELSEI3 ::= VACIO 
            {
              ArrayList<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSEI3",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$2 ::= 
            {
              ArrayList<Nodo> RESULT =null;
		int con1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int con1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> con1 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int con2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int con2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo con2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
con1.add(con2); RESULT=con1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ELSEI2 ::= ELSEI ELSE1 NT$2 VACIO 
            {
              ArrayList<Nodo> RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (ArrayList<Nodo>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int con1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int con1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Nodo> con1 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int con2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int con2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo con2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSEI2",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ELSEI ::= ELSEI ELSE 
            {
              ArrayList<Nodo> RESULT =null;
		int con1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int con1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> con1 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int con2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int con2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo con2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
con1.add(con2);
RESULT = con1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSEI",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ELSEI ::= ELSE 
            {
              ArrayList<Nodo> RESULT =null;
		int con2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int con2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo con2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		    ArrayList<Nodo> noditos = new ArrayList<Nodo>();
				
			noditos.add(con2);
			RESULT=noditos;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSEI",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ELSE ::= ELS IFF PAR_A EXP PAR_B CORRCH_A CONTENIDOMETODO3 CORRCH_B 
            {
              Nodo RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Nodo ex = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> con = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
Nodo els=new Nodo();
Nodo ncont=new Nodo();

els.contenido="Else If";

for(Nodo nod : con){
ncont.nodo.add(nod);
}

els.nodo.add(ex);
els.nodo.add(ncont);

RESULT = els;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ELSE1 ::= ELSE2 
            {
              Nodo RESULT =null;
		int con1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int con1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo con1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = con1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE1",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ELSE2 ::= ELS CORRCH_A CONTENIDOMETODO3 CORRCH_B 
            {
              Nodo RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> con = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
Nodo els=new Nodo();
Nodo ncont=new Nodo();

els.contenido="Else";

for(Nodo nod : con){
ncont.nodo.add(nod);
}

els.nodo.add(ncont);

RESULT =els;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE2",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PARAMETROS3 ::= PARAMETROS 
            {
              Nodo RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo pa = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = pa;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PARAMETROS3 ::= VACIO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS3",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PARAMETROS ::= PARAMETROS COMA PARAMETROS2 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PARAMETROS ::= PARAMETROS2 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PARAMETROS2 ::= TIPOD IDD 
            {
              Nodo RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    listapar.contenido="Lista Parametros";
Nodo npar=new Nodo();	
Nodo ntipo=new Nodo();	
Nodo nid=new Nodo();	

npar.contenido="Parameto";
ntipo.contenido=td;
nid.contenido=id;

npar.nodo.add(ntipo);
npar.nodo.add(nid);

listapar.nodo.add(nid);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DECLARACIONDATO ::= DECLACADENA ASIGNAR PUNTOCOMA 
            {
              Nodo RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo cadena = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int asgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo asg = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
nodoconclas2.contenido="Contenido Clase";

Nodo nvar = new Nodo();
nvar.contenido="Variable";
nvar.nodo.add(cadena);
if(asg!=null){
asg.contenido="exp";
nvar.nodo.add(asg);
}
nodoconclas2.nodo.add(nvar);
RESULT = nodoconclas2;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONDATO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DECLARACIONDATO ::= FINALSTATIC ASIGNAR PUNTOCOMA 
            {
              Nodo RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo cadena = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int asgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo asg = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
nodoconclas2.contenido="Contenido Clase";

Nodo nvar = new Nodo();
nvar.contenido="Variable";
nvar.nodo.add(cadena);
if(asg!=null){
asg.contenido="exp";
nvar.nodo.add(asg);
}
nodoconclas2.nodo.add(nvar);
RESULT = nodoconclas2;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONDATO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ASIGNAR ::= IGUAL EXP 
            {
              Nodo RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ex = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ex.contenido="EXP"; RESULT=ex;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNAR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ASIGNAR ::= VACIO 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNAR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DECLACADENA ::= VISIB STATIC TIPOD LISTAID 
            {
              Nodo RESULT =null;
		int visleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vis = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String stat = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

if(!vis.equals("")&&!stat.equals("")){
 Nodo ncadena=new Nodo();
 
 Nodo nvis=new Nodo();
 Nodo nstat=new Nodo();
 Nodo ntipo=new Nodo();
 
 ncadena.contenido="Datos";
 nvis.contenido=vis;
 nstat.contenido=stat;
 ntipo.contenido=tt;
 
 ncadena.nodo.add(nvis);
 ncadena.nodo.add(nstat);
 ncadena.nodo.add(ntipo);
 ncadena.nodo.add(nodolist);
 nodolist =new Nodo();
 RESULT = ncadena;
 
}
else if(vis.equals("")){
  
 Nodo ncadena=new Nodo();
 
 Nodo nstat=new Nodo();
 Nodo ntipo=new Nodo();
 
 ncadena.contenido="Datos";
 nstat.contenido=stat;
 ntipo.contenido=tt;
 
 ncadena.nodo.add(nstat);
 ncadena.nodo.add(ntipo);
 ncadena.nodo.add(nodolist);
 nodolist =new Nodo();
 RESULT = ncadena;
}
else if(stat.equals("")){

   Nodo ncadena=new Nodo();
 
 Nodo nvis=new Nodo();
 Nodo ntipo=new Nodo();
 
 ncadena.contenido="Datos";
 nvis.contenido=vis;
 ntipo.contenido=tt;
 
 ncadena.nodo.add(nvis);
 ncadena.nodo.add(ntipo);
 ncadena.nodo.add(nodolist);
 nodolist =new Nodo();
 RESULT = ncadena;
}else{
Nodo ncadena=new Nodo();
 
 Nodo ntipo=new Nodo();
 
 ncadena.contenido="Datos";
 ntipo.contenido=tt;
 
 ncadena.nodo.add(ntipo);
 ncadena.nodo.add(nodolist);
 nodolist =new Nodo();
 RESULT = ncadena;
}


              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLACADENA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FINALSTATIC ::= FINA STATIC TIPOD LISTAID 
            {
              Nodo RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
if(st.equals("")){
	Nodo nfin=new Nodo();
	Nodo ntipo=new Nodo();
	Nodo nstat=new Nodo();
	Nodo ncadena=new Nodo();
	
	nfin.contenido="final";
	ntipo.contenido=td;
	nstat.contenido="static";
	
	ncadena.nodo.add(nfin);
	ncadena.nodo.add(nstat);
	ncadena.nodo.add(ntipo);
	ncadena.nodo.add(nodolist);
        nodolist = new Nodo();
 
	RESULT = ncadena;
}else{
	Nodo nfin=new Nodo();
	Nodo ntipo=new Nodo();
	Nodo ncadena=new Nodo();
	
	nfin.contenido="final";
	ntipo.contenido=td;
	
	ncadena.nodo.add(nfin);
	ncadena.nodo.add(ntipo);
	ncadena.nodo.add(nodolist);
        nodolist = new Nodo();
 
	RESULT = ncadena;
	
}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FINALSTATIC",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXP ::= IDD 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Nodo nid=new Nodo(); nid.contenido=id; RESULT = nid;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXP ::= NUMERO 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Nodo nid=new Nodo(); nid.contenido=id; RESULT = nid;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXP ::= TEXTO 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Nodo nid=new Nodo(); nid.contenido=id; RESULT = nid;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXP ::= TRU 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Nodo nid=new Nodo(); nid.contenido="true"; RESULT = nid;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXP ::= EXP POR EXP 
            {
              Nodo RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo ex1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ex2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Nodo nop=new Nodo(); Nodo nret=new Nodo(); nret.contenido="EXP"; nop.contenido="*"; nret.nodo.add(ex1); nret.nodo.add(nop); nret.nodo.add(ex2); RESULT = nret;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXP ::= EXP DIVIDIR EXP 
            {
              Nodo RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo ex1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ex2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Nodo nop=new Nodo(); Nodo nret=new Nodo(); nret.contenido="EXP"; nop.contenido="/"; nret.nodo.add(ex1); nret.nodo.add(nop); nret.nodo.add(ex2); RESULT = nret;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXP ::= EXP MODULO EXP 
            {
              Nodo RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo ex1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ex2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Nodo nop=new Nodo(); Nodo nret=new Nodo(); nret.contenido="EXP"; nop.contenido="%"; nret.nodo.add(ex1); nret.nodo.add(nop); nret.nodo.add(ex2); RESULT = nret;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXP ::= EXP MENOS EXP 
            {
              Nodo RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo ex1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ex2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Nodo nop=new Nodo(); Nodo nret=new Nodo(); nret.contenido="EXP"; nop.contenido="-"; nret.nodo.add(ex1); nret.nodo.add(nop); nret.nodo.add(ex2); RESULT = nret;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXP ::= EXP MAS EXP 
            {
              Nodo RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo ex1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ex2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Nodo nop=new Nodo(); Nodo nret=new Nodo(); nret.contenido="EXP"; nop.contenido="+"; nret.nodo.add(ex1); nret.nodo.add(nop); nret.nodo.add(ex2); RESULT = nret;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXP ::= EXP POT EXP 
            {
              Nodo RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo ex1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ex2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Nodo nop=new Nodo(); Nodo nret=new Nodo(); nret.contenido="EXP"; nop.contenido="^"; nret.nodo.add(ex1); nret.nodo.add(nop); nret.nodo.add(ex2); RESULT = nret;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXP ::= FAL 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Nodo nid=new Nodo(); nid.contenido="false"; RESULT = nid;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXP ::= MENOS NUMID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Nodo nid=new Nodo(); nid.contenido="-"+id; RESULT = nid;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXP ::= PAR_A EXP PAR_B 
            {
              Nodo RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo ex = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = ex;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXP ::= IDD MASMAS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXP ::= EXP OP EXP 
            {
              Nodo RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo ex1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ex2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Nodo nop=new Nodo(); Nodo nret=new Nodo(); nret.contenido="EXP"; nop.contenido=op; nret.nodo.add(ex1); nret.nodo.add(nop); nret.nodo.add(ex2); RESULT = nret;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXP ::= NOTT EXP 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXP ::= LLAMADA 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXP ::= IDD MENOSMENOS 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXP ::= MASMAS IDD 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXP ::= EXP OPOI EXP 
            {
              Nodo RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo ex1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ex2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Nodo nop=new Nodo(); Nodo nret=new Nodo(); nret.contenido="EXP"; nop.contenido=op; nret.nodo.add(ex1); nret.nodo.add(nop); nret.nodo.add(ex2); RESULT = nret;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXP ::= MENOSMENOS IDD 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXP ::= TEXTO1 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Nodo nid=new Nodo(); nid.contenido=id; RESULT = nid;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NUMID ::= IDD 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NUMID",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NUMID ::= NUMERO 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NUMID",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // LISTAID ::= LISTAID COMA LISTAID2 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAID",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // LISTAID ::= LISTAID2 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAID",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // LISTAID2 ::= IDD 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
nodolist.contenido="Lista Variables";
Nodo aux = new Nodo(); 
aux.contenido=id;
nodolist.nodo.add(aux);; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAID2",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // IMPORT ::= IMPORT IMPORT2 
            {
              String RESULT =null;
		int im1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int im1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String im1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int im2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int im2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String im2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =im1+im2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORT",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // IMPORT ::= IMPORT2 
            {
              String RESULT =null;
		int im2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int im2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String im2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =im2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORT",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // IMPORT2 ::= IMP NOMBREIMP PUNTOCOMA 
            {
              String RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
Nodo nimport = new Nodo();
raiz.nodo.add(nimport);
Nodo ncontador = new Nodo();

nimport.contenido="Import";
ncontador.contenido=nom;

nimport.nodo.add(ncontador);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORT2",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NOMBREIMP ::= CADENAIMP 
            {
              String RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = cad;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBREIMP",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NOMBREIMP ::= CADENAIMP PUNTO POR 
            {
              String RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT=cad+".*";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBREIMP",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CADENAIMP ::= CADENAIMP PUNTO IDD 
            {
              String RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT =cad +"."+id;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CADENAIMP",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CADENAIMP ::= IDD 
            {
              String RESULT =null;
		int iddleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String idd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = idd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CADENAIMP",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // TIPOD ::= STRINGG 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "string";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOD",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // TIPOD ::= BOOL 
            {
              String RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "boolean";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOD",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // TIPOD ::= DOUB 
            {
              String RESULT =null;
		int duleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int duright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String du = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  "double";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOD",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // TIPOD ::= INT 
            {
              String RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "int";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOD",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // TIPOD ::= CHARR 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT ="char";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOD",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // VOID ::= VOIDD 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VOID",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OPOI ::= ANDD 
            {
              String RESULT =null;
		RESULT = "&&";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPOI",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OPOI ::= ORR 
            {
              String RESULT =null;
		RESULT = "||";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPOI",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // VISIB ::= PUB 
            {
              String RESULT =null;
		int puleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int puright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pu = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pu;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIB",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // VISIB ::= PRIV 
            {
              String RESULT =null;
		int prileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int priright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pri = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pri;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIB",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // VISIB ::= PROTEC 
            {
              String RESULT =null;
		int proleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int proright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pro = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pro;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIB",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // VISIB ::= VACIO 
            {
              String RESULT =null;
		 RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIB",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // STATIC ::= STAT 
            {
              String RESULT =null;
		RESULT = "static";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATIC",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // STATIC ::= VACIO 
            {
              String RESULT =null;
		RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATIC",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // VACIO ::= 
            {
              Nodo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VACIO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OP ::= IGUALIGUAL 
            {
              String RESULT =null;
		RESULT = "==";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OP ::= DIFERENTE 
            {
              String RESULT =null;
		RESULT = "!=";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OP ::= MENORR 
            {
              String RESULT =null;
		RESULT = ">";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // OP ::= MENORRIGUAL 
            {
              String RESULT =null;
		RESULT = ">=";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OP ::= MAYORR 
            {
              String RESULT =null;
		RESULT = "<";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OP ::= MAYORRIGUAL 
            {
              String RESULT =null;
		RESULT = "<=";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
