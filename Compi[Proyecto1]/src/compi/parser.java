
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package compi;

import java_cup.runtime.Symbol;
import java.awt.List;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\252\000\002\002\004\000\002\002\003\000\002\011" +
    "\005\000\002\011\003\000\002\011\004\000\002\011\004" +
    "\000\002\074\004\000\002\003\004\000\002\003\003\000" +
    "\002\115\002\000\002\007\011\000\002\047\004\000\002" +
    "\047\003\000\002\023\003\000\002\023\003\000\002\116" +
    "\002\000\002\040\015\000\002\117\002\000\002\040\015" +
    "\000\002\106\005\000\002\106\004\000\002\004\007\000" +
    "\002\054\003\000\002\054\003\000\002\044\004\000\002" +
    "\044\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\004\000\002\045\004\000\002\045\004\000\002" +
    "\045\004\000\002\073\013\000\002\076\010\000\002\111" +
    "\003\000\002\111\003\000\002\112\005\000\002\112\004" +
    "\000\002\077\010\000\002\100\005\000\002\100\003\000" +
    "\002\101\003\000\002\075\011\000\002\103\003\000\002" +
    "\103\003\000\002\017\004\000\002\017\004\000\002\104" +
    "\003\000\002\104\003\000\002\104\003\000\002\105\005" +
    "\000\002\105\003\000\002\102\006\000\002\070\015\000" +
    "\002\051\006\000\002\051\005\000\002\051\004\000\002" +
    "\051\004\000\002\113\003\000\002\113\003\000\002\113" +
    "\003\000\002\067\012\000\002\066\011\000\002\052\006" +
    "\000\002\052\005\000\002\052\007\000\002\052\012\000" +
    "\002\052\007\000\002\052\007\000\002\052\007\000\002" +
    "\052\007\000\002\052\007\000\002\046\012\000\002\072" +
    "\003\000\002\072\003\000\002\072\003\000\002\072\003" +
    "\000\002\071\005\000\002\065\004\000\002\065\003\000" +
    "\002\062\012\000\002\064\004\000\002\064\003\000\002" +
    "\063\006\000\002\021\005\000\002\021\003\000\002\057" +
    "\005\000\002\057\006\000\002\057\004\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\043\003\000\002\043\003\000\002\041\005\000\002" +
    "\041\003\000\002\042\004\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\010\000\002\024\007" +
    "\000\002\024\007\000\002\024\007\000\002\024\007\000" +
    "\002\024\007\000\002\037\004\000\002\037\003\000\002" +
    "\036\006\000\002\120\002\000\002\056\007\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\004\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\004\000\002\033" +
    "\004\000\002\033\004\000\002\033\004\000\002\033\003" +
    "\000\002\034\003\000\002\034\003\000\002\031\005\000" +
    "\002\031\003\000\002\032\003\000\002\005\004\000\002" +
    "\005\003\000\002\006\005\000\002\010\003\000\002\010" +
    "\005\000\002\012\005\000\002\012\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\061\003\000\002" +
    "\061\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\055\003\000\002\026\003" +
    "\000\002\026\003\000\002\025\002\000\002\060\003\000" +
    "\002\060\003\000\002\060\003\000\002\060\003\000\002" +
    "\060\003\000\002\060\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0160\000\020\003\016\004\014\006\uff5e\047\021\050" +
    "\006\051\017\070\015\001\002\000\014\004\uff73\006\uff73" +
    "\047\uff73\050\uff73\051\uff73\001\002\000\004\002\ufffe\001" +
    "\002\000\024\005\uff63\006\uff63\041\uff63\042\uff63\043\uff63" +
    "\044\uff63\045\uff63\046\uff63\052\uff63\001\002\000\004\002" +
    "\000\001\002\000\004\006\042\001\002\000\024\005\uff62" +
    "\006\uff62\041\uff62\042\uff62\043\uff62\044\uff62\045\uff62\046" +
    "\uff62\052\uff62\001\002\000\004\020\040\001\002\000\004" +
    "\002\037\001\002\000\004\076\031\001\002\000\004\076" +
    "\027\001\002\000\006\016\025\020\026\001\002\000\024" +
    "\005\uff64\006\uff64\041\uff64\042\uff64\043\uff64\044\uff64\045" +
    "\uff64\046\uff64\052\uff64\001\002\000\014\004\014\006\uff5e" +
    "\047\021\050\006\051\017\001\002\000\024\005\uff65\006" +
    "\uff65\041\uff65\042\uff65\043\uff65\044\uff65\045\uff65\046\uff65" +
    "\052\uff65\001\002\000\004\002\ufff9\001\002\000\004\002" +
    "\ufffa\001\002\000\014\004\uff74\006\uff74\047\uff74\050\uff74" +
    "\051\uff74\001\002\000\004\002\ufffc\001\002\000\004\002" +
    "\ufffd\001\002\000\004\020\ufffb\001\002\000\004\020\036" +
    "\001\002\000\006\020\uff6e\021\uff6e\001\002\000\006\020" +
    "\uff71\021\033\001\002\000\006\036\035\076\034\001\002" +
    "\000\006\020\uff6f\021\uff6f\001\002\000\004\020\uff70\001" +
    "\002\000\014\004\uff72\006\uff72\047\uff72\050\uff72\051\uff72" +
    "\001\002\000\004\002\001\001\002\000\014\004\014\006" +
    "\uff5e\047\021\050\006\051\017\001\002\000\004\002\uffff" +
    "\001\002\000\004\076\043\001\002\000\004\015\ufff8\001" +
    "\002\000\004\015\045\001\002\000\034\005\uff5e\041\uff5e" +
    "\042\uff5e\043\uff5e\044\uff5e\045\uff5e\046\uff5e\047\021\050" +
    "\006\051\017\052\uff5e\053\054\076\051\001\002\000\036" +
    "\005\ufff5\016\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045" +
    "\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5" +
    "\076\ufff5\001\002\000\006\020\uff5e\102\157\001\002\000" +
    "\006\020\uff5e\102\157\001\002\000\022\020\uff5e\033\u0147" +
    "\034\u0149\035\u0144\036\u0146\040\u0148\076\u0145\102\157\001" +
    "\002\000\022\005\uff5e\041\uff5e\042\uff5e\043\uff5e\044\uff5e" +
    "\045\uff5e\046\uff5e\052\062\001\002\000\036\005\ufff4\016" +
    "\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4" +
    "\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\076\ufff4\001" +
    "\002\000\020\041\uff61\042\uff61\043\uff61\044\uff61\045\uff61" +
    "\046\uff61\052\uff61\001\002\000\036\005\ufff3\016\ufff3\041" +
    "\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3" +
    "\050\ufff3\051\ufff3\052\ufff3\053\ufff3\076\ufff3\001\002\000" +
    "\036\005\uff5e\016\101\041\uff5e\042\uff5e\043\uff5e\044\uff5e" +
    "\045\uff5e\046\uff5e\047\021\050\006\051\017\052\uff5e\053" +
    "\054\076\051\001\002\000\020\041\uff5e\042\uff5e\043\uff5e" +
    "\044\uff5e\045\uff5e\046\uff5e\052\062\001\002\000\016\041" +
    "\071\042\065\043\064\044\063\045\070\046\066\001\002" +
    "\000\020\005\uff5f\041\uff5f\042\uff5f\043\uff5f\044\uff5f\045" +
    "\uff5f\046\uff5f\001\002\000\020\005\uff60\041\uff60\042\uff60" +
    "\043\uff60\044\uff60\045\uff60\046\uff60\001\002\000\004\076" +
    "\uff6b\001\002\000\004\076\uff6c\001\002\000\004\076\uff68" +
    "\001\002\000\004\076\uff6d\001\002\000\004\076\uff8c\001" +
    "\002\000\004\076\uff69\001\002\000\004\076\uff6a\001\002" +
    "\000\004\076\073\001\002\000\010\017\uff75\020\uff75\102" +
    "\uff75\001\002\000\010\017\076\020\uff8b\102\uff8b\001\002" +
    "\000\010\017\uff76\020\uff76\102\uff76\001\002\000\004\076" +
    "\073\001\002\000\010\017\uff77\020\uff77\102\uff77\001\002" +
    "\000\036\005\ufff6\016\ufff6\041\ufff6\042\ufff6\043\ufff6\044" +
    "\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6" +
    "\053\ufff6\076\ufff6\001\002\000\004\002\ufff7\001\002\000" +
    "\020\005\103\041\071\042\065\043\064\044\063\045\070" +
    "\046\066\001\002\000\004\076\u013c\001\002\000\004\076" +
    "\105\001\002\000\012\013\ufff2\017\uff75\020\uff75\102\uff75" +
    "\001\002\000\010\017\076\020\uff8d\102\uff8d\001\002\000" +
    "\004\013\110\001\002\000\020\014\uff5e\041\071\042\065" +
    "\043\064\044\063\045\070\046\066\001\002\000\004\014" +
    "\uff9c\001\002\000\004\076\u013b\001\002\000\004\014\120" +
    "\001\002\000\006\014\uff9a\017\uff9a\001\002\000\006\014" +
    "\uff9d\017\116\001\002\000\016\041\071\042\065\043\064" +
    "\044\063\045\070\046\066\001\002\000\006\014\uff9b\017" +
    "\uff9b\001\002\000\004\015\121\001\002\000\050\003\144" +
    "\016\uff5e\041\071\042\065\043\064\044\063\045\070\046" +
    "\066\053\151\054\124\055\150\056\145\062\131\063\122" +
    "\064\137\066\140\067\146\076\126\106\134\001\002\000" +
    "\004\013\u0135\001\002\000\054\003\uffe1\016\uffe1\041\uffe1" +
    "\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\053\uffe1\054" +
    "\uffe1\055\uffe1\056\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1" +
    "\064\uffe1\066\uffe1\067\uffe1\076\uffe1\106\uffe1\001\002\000" +
    "\030\011\174\012\173\013\164\020\u0132\035\166\075\172" +
    "\076\167\101\165\103\163\104\170\105\171\001\002\000" +
    "\054\003\uffe0\016\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0" +
    "\045\uffe0\046\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\060" +
    "\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\066\uffe0\067\uffe0" +
    "\076\uffe0\106\uffe0\001\002\000\026\013\uff5e\020\uff5e\021" +
    "\260\033\u0118\034\u011a\035\u0114\036\u0117\040\u0119\076\u0115" +
    "\102\157\001\002\000\054\003\uffe5\016\uffe5\041\uffe5\042" +
    "\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\053\uffe5\054\uffe5" +
    "\055\uffe5\056\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064" +
    "\uffe5\066\uffe5\067\uffe5\076\uffe5\106\uffe5\001\002\000\054" +
    "\003\uffdf\016\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045" +
    "\uffdf\046\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\060\uffdf" +
    "\061\uffdf\062\uffdf\063\uffdf\064\uffdf\066\uffdf\067\uffdf\076" +
    "\uffdf\106\uffdf\001\002\000\004\013\376\001\002\000\054" +
    "\003\uffe2\016\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045" +
    "\uffe2\046\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\060\uffe2" +
    "\061\uffe2\062\uffe2\063\uffe2\064\uffe2\066\uffe2\067\uffe2\076" +
    "\uffe2\106\uffe2\001\002\000\004\076\373\001\002\000\004" +
    "\020\372\001\002\000\054\003\uffe7\016\uffe7\041\uffe7\042" +
    "\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\053\uffe7\054\uffe7" +
    "\055\uffe7\056\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064" +
    "\uffe7\066\uffe7\067\uffe7\076\uffe7\106\uffe7\001\002\000\054" +
    "\003\uffe4\016\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045" +
    "\uffe4\046\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\060\uffe4" +
    "\061\uffe4\062\uffe4\063\uffe4\064\uffe4\066\uffe4\067\uffe4\076" +
    "\uffe4\106\uffe4\001\002\000\004\021\365\001\002\000\004" +
    "\013\337\001\002\000\054\003\uffe6\016\uffe6\041\uffe6\042" +
    "\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\053\uffe6\054\uffe6" +
    "\055\uffe6\056\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064" +
    "\uffe6\066\uffe6\067\uffe6\076\uffe6\106\uffe6\001\002\000\004" +
    "\016\336\001\002\000\054\003\uffe8\016\uffe8\041\uffe8\042" +
    "\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\053\uffe8\054\uffe8" +
    "\055\uffe8\056\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064" +
    "\uffe8\066\uffe8\067\uffe8\076\uffe8\106\uffe8\001\002\000\006" +
    "\016\334\020\335\001\002\000\004\013\277\001\002\000" +
    "\004\015\222\001\002\000\054\003\uffe3\016\uffe3\041\uffe3" +
    "\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\053\uffe3\054" +
    "\uffe3\055\uffe3\056\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3" +
    "\064\uffe3\066\uffe3\067\uffe3\076\uffe3\106\uffe3\001\002\000" +
    "\004\020\221\001\002\000\016\041\071\042\065\043\064" +
    "\044\063\045\070\046\066\001\002\000\054\003\144\016" +
    "\uffeb\041\071\042\065\043\064\044\063\045\070\046\066" +
    "\053\151\054\124\055\150\056\145\060\uffeb\061\uffeb\062" +
    "\131\063\122\064\137\066\140\067\146\076\126\106\134" +
    "\001\002\000\010\016\uffea\060\uffea\061\uffea\001\002\000" +
    "\054\003\uffe9\016\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9" +
    "\045\uffe9\046\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\060" +
    "\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9\066\uffe9\067\uffe9" +
    "\076\uffe9\106\uffe9\001\002\000\004\076\156\001\002\000" +
    "\006\020\uff5e\102\157\001\002\000\026\011\174\012\173" +
    "\013\164\035\166\075\172\076\167\101\165\103\163\104" +
    "\170\105\171\001\002\000\004\020\162\001\002\000\004" +
    "\020\uff8e\001\002\000\054\003\uffb9\016\uffb9\041\uffb9\042" +
    "\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\053\uffb9\054\uffb9" +
    "\055\uffb9\056\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064" +
    "\uffb9\066\uffb9\067\uffb9\076\uffb9\106\uffb9\001\002\000\044" +
    "\014\uff87\017\uff87\020\uff87\022\uff87\023\uff87\024\uff87\025" +
    "\uff87\026\uff87\030\uff87\031\uff87\033\uff87\034\uff87\035\uff87" +
    "\036\uff87\040\uff87\100\uff87\102\uff87\001\002\000\026\011" +
    "\174\012\173\013\164\035\166\075\172\076\167\101\165" +
    "\103\163\104\170\105\171\001\002\000\044\014\uff88\017" +
    "\uff88\020\uff88\022\uff88\023\uff88\024\uff88\025\uff88\026\uff88" +
    "\030\uff88\031\uff88\033\uff88\034\uff88\035\uff88\036\uff88\040" +
    "\uff88\100\uff88\102\uff88\001\002\000\006\075\214\076\216" +
    "\001\002\000\050\011\213\012\212\014\uff8a\017\uff8a\020" +
    "\uff8a\022\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a\030\uff8a" +
    "\031\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a\040\uff8a\100" +
    "\uff8a\102\uff8a\001\002\000\044\014\uff86\017\uff86\020\uff86" +
    "\022\uff86\023\uff86\024\uff86\025\uff86\026\uff86\030\uff86\031" +
    "\uff86\033\uff86\034\uff86\035\uff86\036\uff86\040\uff86\100\uff86" +
    "\102\uff86\001\002\000\044\014\uff7a\017\uff7a\020\uff7a\022" +
    "\uff7a\023\uff7a\024\uff7a\025\uff7a\026\uff7a\030\uff7a\031\uff7a" +
    "\033\uff7a\034\uff7a\035\uff7a\036\uff7a\040\uff7a\100\uff7a\102" +
    "\uff7a\001\002\000\044\014\uff89\017\uff89\020\uff89\022\uff89" +
    "\023\uff89\024\uff89\025\uff89\026\uff89\030\uff89\031\uff89\033" +
    "\uff89\034\uff89\035\uff89\036\uff89\040\uff89\100\uff89\102\uff89" +
    "\001\002\000\004\076\211\001\002\000\004\076\210\001" +
    "\002\000\016\020\uff8f\033\177\034\200\035\201\036\202" +
    "\040\176\001\002\000\026\011\174\012\173\013\164\035" +
    "\166\075\172\076\167\101\165\103\163\104\170\105\171" +
    "\001\002\000\026\011\174\012\173\013\164\035\166\075" +
    "\172\076\167\101\165\103\163\104\170\105\171\001\002" +
    "\000\026\011\174\012\173\013\164\035\166\075\172\076" +
    "\167\101\165\103\163\104\170\105\171\001\002\000\026" +
    "\011\174\012\173\013\164\035\166\075\172\076\167\101" +
    "\165\103\163\104\170\105\171\001\002\000\026\011\174" +
    "\012\173\013\164\035\166\075\172\076\167\101\165\103" +
    "\163\104\170\105\171\001\002\000\044\014\uff81\017\uff81" +
    "\020\uff81\022\uff81\023\uff81\024\uff81\025\uff81\026\uff81\030" +
    "\uff81\031\uff81\033\uff81\034\uff81\035\uff81\036\uff81\040\uff81" +
    "\100\uff81\102\uff81\001\002\000\044\014\uff83\017\uff83\020" +
    "\uff83\022\uff83\023\uff83\024\uff83\025\uff83\026\uff83\030\uff83" +
    "\031\uff83\033\uff83\034\uff83\035\uff83\036\uff83\040\uff83\100" +
    "\uff83\102\uff83\001\002\000\044\014\uff7f\017\uff7f\020\uff7f" +
    "\022\uff7f\023\uff7f\024\uff7f\025\uff7f\026\uff7f\030\uff7f\031" +
    "\uff7f\033\uff7f\034\uff7f\035\uff7f\036\uff7f\040\uff7f\100\uff7f" +
    "\102\uff7f\001\002\000\044\014\uff82\017\uff82\020\uff82\022" +
    "\uff82\023\uff82\024\uff82\025\uff82\026\uff82\030\uff82\031\uff82" +
    "\033\uff82\034\uff82\035\uff82\036\uff82\040\uff82\100\uff82\102" +
    "\uff82\001\002\000\044\014\uff80\017\uff80\020\uff80\022\uff80" +
    "\023\uff80\024\uff80\025\uff80\026\uff80\030\uff80\031\uff80\033" +
    "\uff80\034\uff80\035\uff80\036\uff80\040\uff80\100\uff80\102\uff80" +
    "\001\002\000\044\014\uff7c\017\uff7c\020\uff7c\022\uff7c\023" +
    "\uff7c\024\uff7c\025\uff7c\026\uff7c\030\uff7c\031\uff7c\033\uff7c" +
    "\034\uff7c\035\uff7c\036\uff7c\040\uff7c\100\uff7c\102\uff7c\001" +
    "\002\000\044\014\uff7b\017\uff7b\020\uff7b\022\uff7b\023\uff7b" +
    "\024\uff7b\025\uff7b\026\uff7b\030\uff7b\031\uff7b\033\uff7b\034" +
    "\uff7b\035\uff7b\036\uff7b\040\uff7b\100\uff7b\102\uff7b\001\002" +
    "\000\044\014\uff7d\017\uff7d\020\uff7d\022\uff7d\023\uff7d\024" +
    "\uff7d\025\uff7d\026\uff7d\030\uff7d\031\uff7d\033\uff7d\034\uff7d" +
    "\035\uff7d\036\uff7d\040\uff7d\100\uff7d\102\uff7d\001\002\000" +
    "\044\014\uff7e\017\uff7e\020\uff7e\022\uff7e\023\uff7e\024\uff7e" +
    "\025\uff7e\026\uff7e\030\uff7e\031\uff7e\033\uff7e\034\uff7e\035" +
    "\uff7e\036\uff7e\040\uff7e\100\uff7e\102\uff7e\001\002\000\044" +
    "\014\uff78\017\uff78\020\uff78\022\uff78\023\uff78\024\uff78\025" +
    "\uff78\026\uff78\030\uff78\031\uff78\033\uff78\034\uff78\035\uff78" +
    "\036\uff78\040\uff78\100\uff78\102\uff78\001\002\000\044\014" +
    "\uff85\017\uff85\020\uff85\022\uff85\023\uff85\024\uff85\025\uff85" +
    "\026\uff85\030\uff85\031\uff85\033\uff85\034\uff85\035\uff85\036" +
    "\uff85\040\uff85\100\uff85\102\uff85\001\002\000\044\014\uff79" +
    "\017\uff79\020\uff79\022\uff79\023\uff79\024\uff79\025\uff79\026" +
    "\uff79\030\uff79\031\uff79\033\uff79\034\uff79\035\uff79\036\uff79" +
    "\040\uff79\100\uff79\102\uff79\001\002\000\016\014\220\033" +
    "\177\034\200\035\201\036\202\040\176\001\002\000\044" +
    "\014\uff84\017\uff84\020\uff84\022\uff84\023\uff84\024\uff84\025" +
    "\uff84\026\uff84\030\uff84\031\uff84\033\uff84\034\uff84\035\uff84" +
    "\036\uff84\040\uff84\100\uff84\102\uff84\001\002\000\054\003" +
    "\uffde\016\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde" +
    "\046\uffde\053\uffde\054\uffde\055\uffde\056\uffde\060\uffde\061" +
    "\uffde\062\uffde\063\uffde\064\uffde\066\uffde\067\uffde\076\uffde" +
    "\106\uffde\001\002\000\050\003\144\016\uff5e\041\071\042" +
    "\065\043\064\044\063\045\070\046\066\053\151\054\124" +
    "\055\150\056\145\062\131\063\122\064\137\066\140\067" +
    "\146\076\126\106\134\001\002\000\004\016\224\001\002" +
    "\000\004\063\225\001\002\000\004\013\226\001\002\000" +
    "\030\011\174\012\173\013\164\032\235\035\166\075\172" +
    "\076\230\101\165\103\227\104\231\105\171\001\002\000" +
    "\040\014\uff9e\020\uff9e\022\uff87\023\uff87\024\uff87\025\uff87" +
    "\026\uff87\030\uff9e\031\uff9e\033\uff87\034\uff87\035\uff87\036" +
    "\uff87\040\uff87\100\uff87\001\002\000\050\011\213\012\212" +
    "\013\uff5e\014\uffa0\020\uffa0\021\260\022\uff8a\023\uff8a\024" +
    "\uff8a\025\uff8a\026\uff8a\030\uffa0\031\uffa0\033\uff8a\034\uff8a" +
    "\035\uff8a\036\uff8a\040\uff8a\100\uff8a\001\002\000\040\014" +
    "\uff9f\020\uff9f\022\uff86\023\uff86\024\uff86\025\uff86\026\uff86" +
    "\030\uff9f\031\uff9f\033\uff86\034\uff86\035\uff86\036\uff86\040" +
    "\uff86\100\uff86\001\002\000\012\014\uffa1\020\uffa1\030\uffa1" +
    "\031\uffa1\001\002\000\012\014\uffa5\020\uffa5\030\uffa5\031" +
    "\uffa5\001\002\000\030\022\252\023\256\024\255\025\251" +
    "\026\254\033\177\034\200\035\201\036\202\040\176\100" +
    "\253\001\002\000\026\011\174\012\173\013\164\035\166" +
    "\075\172\076\244\101\165\103\163\104\170\105\171\001" +
    "\002\000\010\014\241\030\237\031\242\001\002\000\030" +
    "\011\uff67\012\uff67\013\uff67\032\uff67\035\uff67\075\uff67\076" +
    "\uff67\101\uff67\103\uff67\104\uff67\105\uff67\001\002\000\030" +
    "\011\174\012\173\013\164\032\235\035\166\075\172\076" +
    "\230\101\165\103\227\104\231\105\171\001\002\000\054" +
    "\003\uffbd\016\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045" +
    "\uffbd\046\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\060\uffbd" +
    "\061\uffbd\062\uffbd\063\uffbd\064\uffbd\066\uffbd\067\uffbd\076" +
    "\uffbd\106\uffbd\001\002\000\030\011\uff66\012\uff66\013\uff66" +
    "\032\uff66\035\uff66\075\uff66\076\uff66\101\uff66\103\uff66\104" +
    "\uff66\105\uff66\001\002\000\012\014\uffa6\020\uffa6\030\uffa6" +
    "\031\uffa6\001\002\000\032\011\213\012\212\014\uffa2\020" +
    "\uffa2\030\uffa2\031\uffa2\033\uff8a\034\uff8a\035\uff8a\036\uff8a" +
    "\040\uff8a\102\uff8a\001\002\000\016\033\177\034\200\035" +
    "\201\036\202\040\176\102\246\001\002\000\026\011\174" +
    "\012\173\013\164\035\166\075\172\076\167\101\165\103" +
    "\163\104\170\105\171\001\002\000\024\014\uffa3\020\uffa3" +
    "\030\uffa3\031\uffa3\033\177\034\200\035\201\036\202\040" +
    "\176\001\002\000\026\011\174\012\173\013\164\035\166" +
    "\075\172\076\167\101\165\103\163\104\170\105\171\001" +
    "\002\000\026\011\uff58\012\uff58\013\uff58\035\uff58\075\uff58" +
    "\076\uff58\101\uff58\103\uff58\104\uff58\105\uff58\001\002\000" +
    "\026\011\uff5b\012\uff5b\013\uff5b\035\uff5b\075\uff5b\076\uff5b" +
    "\101\uff5b\103\uff5b\104\uff5b\105\uff5b\001\002\000\026\011" +
    "\uff5d\012\uff5d\013\uff5d\035\uff5d\075\uff5d\076\uff5d\101\uff5d" +
    "\103\uff5d\104\uff5d\105\uff5d\001\002\000\026\011\uff5c\012" +
    "\uff5c\013\uff5c\035\uff5c\075\uff5c\076\uff5c\101\uff5c\103\uff5c" +
    "\104\uff5c\105\uff5c\001\002\000\026\011\uff59\012\uff59\013" +
    "\uff59\035\uff59\075\uff59\076\uff59\101\uff59\103\uff59\104\uff59" +
    "\105\uff59\001\002\000\026\011\uff5a\012\uff5a\013\uff5a\035" +
    "\uff5a\075\uff5a\076\uff5a\101\uff5a\103\uff5a\104\uff5a\105\uff5a" +
    "\001\002\000\024\014\uffa4\020\uffa4\030\uffa4\031\uffa4\033" +
    "\177\034\200\035\201\036\202\040\176\001\002\000\004" +
    "\076\276\001\002\000\006\013\uffd8\021\274\001\002\000" +
    "\004\013\264\001\002\000\004\013\uffd7\001\002\000\026" +
    "\011\174\012\173\013\164\035\166\075\172\076\167\101" +
    "\165\103\163\104\170\105\171\001\002\000\006\014\uffd2" +
    "\017\uffd2\001\002\000\006\014\271\017\270\001\002\000" +
    "\020\014\uffd1\017\uffd1\033\177\034\200\035\201\036\202" +
    "\040\176\001\002\000\026\011\174\012\173\013\164\035" +
    "\166\075\172\076\167\101\165\103\163\104\170\105\171" +
    "\001\002\000\004\020\272\001\002\000\064\003\uffd4\014" +
    "\uffd4\016\uffd4\020\uffd4\030\uffd4\031\uffd4\041\uffd4\042\uffd4" +
    "\043\uffd4\044\uffd4\045\uffd4\046\uffd4\053\uffd4\054\uffd4\055" +
    "\uffd4\056\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4" +
    "\066\uffd4\067\uffd4\076\uffd4\106\uffd4\001\002\000\006\014" +
    "\uffd3\017\uffd3\001\002\000\004\076\275\001\002\000\006" +
    "\013\uffd6\021\uffd6\001\002\000\006\013\uffd5\021\uffd5\001" +
    "\002\000\030\011\174\012\173\013\164\032\235\035\166" +
    "\075\172\076\230\101\165\103\227\104\231\105\171\001" +
    "\002\000\010\014\301\030\237\031\242\001\002\000\004" +
    "\015\302\001\002\000\050\003\144\016\uff5e\041\071\042" +
    "\065\043\064\044\063\045\070\046\066\053\151\054\124" +
    "\055\150\056\145\062\131\063\122\064\137\066\140\067" +
    "\146\076\126\106\134\001\002\000\004\016\304\001\002" +
    "\000\056\003\uff5e\016\uff5e\041\uff5e\042\uff5e\043\uff5e\044" +
    "\uff5e\045\uff5e\046\uff5e\053\uff5e\054\uff5e\055\uff5e\056\uff5e" +
    "\057\306\060\uff5e\061\uff5e\062\uff5e\063\uff5e\064\uff5e\066" +
    "\uff5e\067\uff5e\076\uff5e\106\uff5e\001\002\000\054\003\uffb2" +
    "\016\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046" +
    "\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\060\uffb2\061\uffb2" +
    "\062\uffb2\063\uffb2\064\uffb2\066\uffb2\067\uffb2\076\uffb2\106" +
    "\uffb2\001\002\000\006\015\317\056\325\001\002\000\054" +
    "\003\uffaf\016\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045" +
    "\uffaf\046\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\060\uffaf" +
    "\061\uffaf\062\uffaf\063\uffaf\064\uffaf\066\uffaf\067\uffaf\076" +
    "\uffaf\106\uffaf\001\002\000\056\003\uffab\016\uffab\041\uffab" +
    "\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\053\uffab\054" +
    "\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab\062\uffab" +
    "\063\uffab\064\uffab\066\uffab\067\uffab\076\uffab\106\uffab\001" +
    "\002\000\056\003\uffb1\016\uffb1\041\uffb1\042\uffb1\043\uffb1" +
    "\044\uffb1\045\uffb1\046\uffb1\053\uffb1\054\uffb1\055\uffb1\056" +
    "\uffb1\057\306\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1" +
    "\066\uffb1\067\uffb1\076\uffb1\106\uffb1\001\002\000\056\003" +
    "\uffa8\016\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8" +
    "\046\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\060" +
    "\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\066\uffa8\067\uffa8" +
    "\076\uffa8\106\uffa8\001\002\000\056\003\uffb0\016\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\053\uffb0" +
    "\054\uffb0\055\uffb0\056\uffb0\057\315\060\uffb0\061\uffb0\062" +
    "\uffb0\063\uffb0\064\uffb0\066\uffb0\067\uffb0\076\uffb0\106\uffb0" +
    "\001\002\000\054\003\uffae\016\uffae\041\uffae\042\uffae\043" +
    "\uffae\044\uffae\045\uffae\046\uffae\053\uffae\054\uffae\055\uffae" +
    "\056\uffae\060\uffae\061\uffae\062\uffae\063\uffae\064\uffae\066" +
    "\uffae\067\uffae\076\uffae\106\uffae\001\002\000\004\015\317" +
    "\001\002\000\056\003\uffa9\016\uffa9\041\uffa9\042\uffa9\043" +
    "\uffa9\044\uffa9\045\uffa9\046\uffa9\053\uffa9\054\uffa9\055\uffa9" +
    "\056\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9\064" +
    "\uffa9\066\uffa9\067\uffa9\076\uffa9\106\uffa9\001\002\000\050" +
    "\003\144\016\uff5e\041\071\042\065\043\064\044\063\045" +
    "\070\046\066\053\151\054\124\055\150\056\145\062\131" +
    "\063\122\064\137\066\140\067\146\076\126\106\134\001" +
    "\002\000\004\016\321\001\002\000\056\003\uffa7\016\uffa7" +
    "\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\053" +
    "\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7" +
    "\062\uffa7\063\uffa7\064\uffa7\066\uffa7\067\uffa7\076\uffa7\106" +
    "\uffa7\001\002\000\056\003\uffac\016\uffac\041\uffac\042\uffac" +
    "\043\uffac\044\uffac\045\uffac\046\uffac\053\uffac\054\uffac\055" +
    "\uffac\056\uffac\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac" +
    "\064\uffac\066\uffac\067\uffac\076\uffac\106\uffac\001\002\000" +
    "\056\003\uff5e\016\uff5e\041\uff5e\042\uff5e\043\uff5e\044\uff5e" +
    "\045\uff5e\046\uff5e\053\uff5e\054\uff5e\055\uff5e\056\uff5e\057" +
    "\315\060\uff5e\061\uff5e\062\uff5e\063\uff5e\064\uff5e\066\uff5e" +
    "\067\uff5e\076\uff5e\106\uff5e\001\002\000\054\003\uffad\016" +
    "\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad" +
    "\053\uffad\054\uffad\055\uffad\056\uffad\060\uffad\061\uffad\062" +
    "\uffad\063\uffad\064\uffad\066\uffad\067\uffad\076\uffad\106\uffad" +
    "\001\002\000\004\013\326\001\002\000\030\011\174\012" +
    "\173\013\164\032\235\035\166\075\172\076\230\101\165" +
    "\103\227\104\231\105\171\001\002\000\010\014\330\030" +
    "\237\031\242\001\002\000\004\015\331\001\002\000\050" +
    "\003\144\016\uff5e\041\071\042\065\043\064\044\063\045" +
    "\070\046\066\053\151\054\124\055\150\056\145\062\131" +
    "\063\122\064\137\066\140\067\146\076\126\106\134\001" +
    "\002\000\004\016\333\001\002\000\056\003\uffaa\016\uffaa" +
    "\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\053" +
    "\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa" +
    "\062\uffaa\063\uffaa\064\uffaa\066\uffaa\067\uffaa\076\uffaa\106" +
    "\uffaa\001\002\000\054\003\uffdb\016\uffdb\041\uffdb\042\uffdb" +
    "\043\uffdb\044\uffdb\045\uffdb\046\uffdb\053\uffdb\054\uffdb\055" +
    "\uffdb\056\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb" +
    "\066\uffdb\067\uffdb\076\uffdb\106\uffdb\001\002\000\054\003" +
    "\uffdc\016\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc" +
    "\046\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\060\uffdc\061" +
    "\uffdc\062\uffdc\063\uffdc\064\uffdc\066\uffdc\067\uffdc\076\uffdc" +
    "\106\uffdc\001\002\000\036\005\ufff1\016\ufff1\041\ufff1\042" +
    "\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1" +
    "\051\ufff1\052\ufff1\053\ufff1\076\ufff1\001\002\000\026\011" +
    "\174\012\173\013\164\035\166\075\172\076\167\101\165" +
    "\103\163\104\170\105\171\001\002\000\016\014\341\033" +
    "\177\034\200\035\201\036\202\040\176\001\002\000\004" +
    "\015\342\001\002\000\006\016\uff5e\061\346\001\002\000" +
    "\010\016\uff5e\060\361\061\uff5e\001\002\000\006\016\uffcf" +
    "\061\346\001\002\000\004\016\356\001\002\000\010\075" +
    "\351\101\350\105\353\001\002\000\004\016\uffce\001\002" +
    "\000\004\065\uffca\001\002\000\004\065\uffc9\001\002\000" +
    "\004\065\354\001\002\000\004\065\uffcb\001\002\000\054" +
    "\003\144\016\uff5e\041\071\042\065\043\064\044\063\045" +
    "\070\046\066\053\151\054\124\055\150\056\145\060\uff5e" +
    "\061\uff5e\062\131\063\122\064\137\066\140\067\146\076" +
    "\126\106\134\001\002\000\010\016\uffc6\060\uffc6\061\uffc6" +
    "\001\002\000\054\003\uffd0\016\uffd0\041\uffd0\042\uffd0\043" +
    "\uffd0\044\uffd0\045\uffd0\046\uffd0\053\uffd0\054\uffd0\055\uffd0" +
    "\056\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\066" +
    "\uffd0\067\uffd0\076\uffd0\106\uffd0\001\002\000\006\016\uffcd" +
    "\061\uffcd\001\002\000\006\016\uffcc\061\uffcc\001\002\000" +
    "\004\065\363\001\002\000\006\016\uffc7\061\uffc7\001\002" +
    "\000\052\003\144\016\uff5e\041\071\042\065\043\064\044" +
    "\063\045\070\046\066\053\151\054\124\055\150\056\145" +
    "\061\uff5e\062\131\063\122\064\137\066\140\067\146\076" +
    "\126\106\134\001\002\000\006\016\uffc8\061\uffc8\001\002" +
    "\000\004\076\366\001\002\000\004\102\367\001\002\000" +
    "\026\011\174\012\173\013\164\035\166\075\172\076\167" +
    "\101\165\103\163\104\170\105\171\001\002\000\016\020" +
    "\371\033\177\034\200\035\201\036\202\040\176\001\002" +
    "\000\054\003\uffd9\016\uffd9\041\uffd9\042\uffd9\043\uffd9\044" +
    "\uffd9\045\uffd9\046\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9" +
    "\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\066\uffd9\067" +
    "\uffd9\076\uffd9\106\uffd9\001\002\000\054\003\uffdd\016\uffdd" +
    "\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\053" +
    "\uffdd\054\uffdd\055\uffdd\056\uffdd\060\uffdd\061\uffdd\062\uffdd" +
    "\063\uffdd\064\uffdd\066\uffdd\067\uffdd\076\uffdd\106\uffdd\001" +
    "\002\000\006\020\uff5e\102\157\001\002\000\004\020\375" +
    "\001\002\000\054\003\uffbb\016\uffbb\041\uffbb\042\uffbb\043" +
    "\uffbb\044\uffbb\045\uffbb\046\uffbb\053\uffbb\054\uffbb\055\uffbb" +
    "\056\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\066" +
    "\uffbb\067\uffbb\076\uffbb\106\uffbb\001\002\000\012\041\u0104" +
    "\042\u0103\044\377\076\u0102\001\002\000\004\076\uffbe\001" +
    "\002\000\004\076\u0111\001\002\000\004\020\u0109\001\002" +
    "\000\010\011\u0106\012\u0105\102\u0107\001\002\000\004\076" +
    "\uffbf\001\002\000\004\076\uffc0\001\002\000\006\014\uffc1" +
    "\020\uffc1\001\002\000\006\014\uffc2\020\uffc2\001\002\000" +
    "\026\011\174\012\173\013\164\035\166\075\172\076\167" +
    "\101\165\103\163\104\170\105\171\001\002\000\020\014" +
    "\uffc3\020\uffc3\033\177\034\200\035\201\036\202\040\176" +
    "\001\002\000\030\011\174\012\173\013\164\032\235\035" +
    "\166\075\172\076\230\101\165\103\227\104\231\105\171" +
    "\001\002\000\010\020\u010b\030\237\031\242\001\002\000" +
    "\012\041\u0104\042\u0103\044\377\076\u0102\001\002\000\004" +
    "\014\u010d\001\002\000\004\015\u010e\001\002\000\050\003" +
    "\144\016\uff5e\041\071\042\065\043\064\044\063\045\070" +
    "\046\066\053\151\054\124\055\150\056\145\062\131\063" +
    "\122\064\137\066\140\067\146\076\126\106\134\001\002" +
    "\000\004\016\u0110\001\002\000\054\003\uffc5\016\uffc5\041" +
    "\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\053\uffc5" +
    "\054\uffc5\055\uffc5\056\uffc5\060\uffc5\061\uffc5\062\uffc5\063" +
    "\uffc5\064\uffc5\066\uffc5\067\uffc5\076\uffc5\106\uffc5\001\002" +
    "\000\004\102\u0112\001\002\000\026\011\174\012\173\013" +
    "\164\035\166\075\172\076\167\101\165\103\163\104\170" +
    "\105\171\001\002\000\020\014\uffc4\020\uffc4\033\177\034" +
    "\200\035\201\036\202\040\176\001\002\000\004\102\u012f" +
    "\001\002\000\004\102\u0129\001\002\000\006\013\uffd7\020" +
    "\uff8e\001\002\000\004\102\u0126\001\002\000\004\102\u0123" +
    "\001\002\000\004\102\u0120\001\002\000\004\102\u011d\001" +
    "\002\000\004\020\u011c\001\002\000\054\003\uffba\016\uffba" +
    "\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\053" +
    "\uffba\054\uffba\055\uffba\056\uffba\060\uffba\061\uffba\062\uffba" +
    "\063\uffba\064\uffba\066\uffba\067\uffba\076\uffba\106\uffba\001" +
    "\002\000\026\011\174\012\173\013\164\035\166\075\172" +
    "\076\167\101\165\103\163\104\170\105\171\001\002\000" +
    "\016\020\u011f\033\177\034\200\035\201\036\202\040\176" +
    "\001\002\000\054\003\uffb5\016\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\044\uffb5\045\uffb5\046\uffb5\053\uffb5\054\uffb5\055\uffb5" +
    "\056\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\066" +
    "\uffb5\067\uffb5\076\uffb5\106\uffb5\001\002\000\026\011\174" +
    "\012\173\013\164\035\166\075\172\076\167\101\165\103" +
    "\163\104\170\105\171\001\002\000\016\020\u0122\033\177" +
    "\034\200\035\201\036\202\040\176\001\002\000\054\003" +
    "\uffb3\016\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3" +
    "\046\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\060\uffb3\061" +
    "\uffb3\062\uffb3\063\uffb3\064\uffb3\066\uffb3\067\uffb3\076\uffb3" +
    "\106\uffb3\001\002\000\026\011\174\012\173\013\164\035" +
    "\166\075\172\076\167\101\165\103\163\104\170\105\171" +
    "\001\002\000\016\020\u0125\033\177\034\200\035\201\036" +
    "\202\040\176\001\002\000\054\003\uffb7\016\uffb7\041\uffb7" +
    "\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\053\uffb7\054" +
    "\uffb7\055\uffb7\056\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7" +
    "\064\uffb7\066\uffb7\067\uffb7\076\uffb7\106\uffb7\001\002\000" +
    "\026\011\174\012\173\013\164\035\166\075\172\076\167" +
    "\101\165\103\163\104\170\105\171\001\002\000\016\020" +
    "\u0128\033\177\034\200\035\201\036\202\040\176\001\002" +
    "\000\054\003\uffb4\016\uffb4\041\uffb4\042\uffb4\043\uffb4\044" +
    "\uffb4\045\uffb4\046\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4" +
    "\060\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\066\uffb4\067" +
    "\uffb4\076\uffb4\106\uffb4\001\002\000\004\010\u012a\001\002" +
    "\000\004\076\u012b\001\002\000\004\013\u012c\001\002\000" +
    "\004\014\u012d\001\002\000\004\020\u012e\001\002\000\054" +
    "\003\uffb8\016\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045" +
    "\uffb8\046\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\060\uffb8" +
    "\061\uffb8\062\uffb8\063\uffb8\064\uffb8\066\uffb8\067\uffb8\076" +
    "\uffb8\106\uffb8\001\002\000\026\011\174\012\173\013\164" +
    "\035\166\075\172\076\167\101\165\103\163\104\170\105" +
    "\171\001\002\000\016\020\u0131\033\177\034\200\035\201" +
    "\036\202\040\176\001\002\000\054\003\uffb6\016\uffb6\041" +
    "\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\053\uffb6" +
    "\054\uffb6\055\uffb6\056\uffb6\060\uffb6\061\uffb6\062\uffb6\063" +
    "\uffb6\064\uffb6\066\uffb6\067\uffb6\076\uffb6\106\uffb6\001\002" +
    "\000\054\003\uffed\016\uffed\041\uffed\042\uffed\043\uffed\044" +
    "\uffed\045\uffed\046\uffed\053\uffed\054\uffed\055\uffed\056\uffed" +
    "\060\uffed\061\uffed\062\uffed\063\uffed\064\uffed\066\uffed\067" +
    "\uffed\076\uffed\106\uffed\001\002\000\016\020\u0134\033\177" +
    "\034\200\035\201\036\202\040\176\001\002\000\054\003" +
    "\uffee\016\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee" +
    "\046\uffee\053\uffee\054\uffee\055\uffee\056\uffee\060\uffee\061" +
    "\uffee\062\uffee\063\uffee\064\uffee\066\uffee\067\uffee\076\uffee" +
    "\106\uffee\001\002\000\030\011\174\012\173\013\164\032" +
    "\235\035\166\075\172\076\230\101\165\103\227\104\231" +
    "\105\171\001\002\000\010\014\u0137\030\237\031\242\001" +
    "\002\000\004\015\u0138\001\002\000\050\003\144\016\uff5e" +
    "\041\071\042\065\043\064\044\063\045\070\046\066\053" +
    "\151\054\124\055\150\056\145\062\131\063\122\064\137" +
    "\066\140\067\146\076\126\106\134\001\002\000\004\016" +
    "\u013a\001\002\000\054\003\uffbc\016\uffbc\041\uffbc\042\uffbc" +
    "\043\uffbc\044\uffbc\045\uffbc\046\uffbc\053\uffbc\054\uffbc\055" +
    "\uffbc\056\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc" +
    "\066\uffbc\067\uffbc\076\uffbc\106\uffbc\001\002\000\006\014" +
    "\uff99\017\uff99\001\002\000\004\013\ufff0\001\002\000\004" +
    "\013\u013e\001\002\000\020\014\uff5e\041\071\042\065\043" +
    "\064\044\063\045\070\046\066\001\002\000\004\014\u0140" +
    "\001\002\000\004\015\u0141\001\002\000\050\003\144\016" +
    "\uff5e\041\071\042\065\043\064\044\063\045\070\046\066" +
    "\053\151\054\124\055\150\056\145\062\131\063\122\064" +
    "\137\066\140\067\146\076\126\106\134\001\002\000\004" +
    "\016\u0143\001\002\000\036\005\uffef\016\uffef\041\uffef\042" +
    "\uffef\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef\050\uffef" +
    "\051\uffef\052\uffef\053\uffef\076\uffef\001\002\000\004\102" +
    "\u015c\001\002\000\004\102\u0158\001\002\000\004\102\u0155" +
    "\001\002\000\004\102\u0152\001\002\000\004\102\u014f\001" +
    "\002\000\004\102\u014c\001\002\000\004\020\u014b\001\002" +
    "\000\036\005\uff97\016\uff97\041\uff97\042\uff97\043\uff97\044" +
    "\uff97\045\uff97\046\uff97\047\uff97\050\uff97\051\uff97\052\uff97" +
    "\053\uff97\076\uff97\001\002\000\026\011\174\012\173\013" +
    "\164\035\166\075\172\076\167\101\165\103\163\104\170" +
    "\105\171\001\002\000\016\020\u014e\033\177\034\200\035" +
    "\201\036\202\040\176\001\002\000\036\005\uff92\016\uff92" +
    "\041\uff92\042\uff92\043\uff92\044\uff92\045\uff92\046\uff92\047" +
    "\uff92\050\uff92\051\uff92\052\uff92\053\uff92\076\uff92\001\002" +
    "\000\026\011\174\012\173\013\164\035\166\075\172\076" +
    "\167\101\165\103\163\104\170\105\171\001\002\000\016" +
    "\020\u0151\033\177\034\200\035\201\036\202\040\176\001" +
    "\002\000\036\005\uff90\016\uff90\041\uff90\042\uff90\043\uff90" +
    "\044\uff90\045\uff90\046\uff90\047\uff90\050\uff90\051\uff90\052" +
    "\uff90\053\uff90\076\uff90\001\002\000\026\011\174\012\173" +
    "\013\164\035\166\075\172\076\167\101\165\103\163\104" +
    "\170\105\171\001\002\000\016\020\u0154\033\177\034\200" +
    "\035\201\036\202\040\176\001\002\000\036\005\uff94\016" +
    "\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94" +
    "\047\uff94\050\uff94\051\uff94\052\uff94\053\uff94\076\uff94\001" +
    "\002\000\026\011\174\012\173\013\164\035\166\075\172" +
    "\076\167\101\165\103\163\104\170\105\171\001\002\000" +
    "\016\020\u0157\033\177\034\200\035\201\036\202\040\176" +
    "\001\002\000\036\005\uff91\016\uff91\041\uff91\042\uff91\043" +
    "\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050\uff91\051\uff91" +
    "\052\uff91\053\uff91\076\uff91\001\002\000\004\010\u0159\001" +
    "\002\000\004\076\u015a\001\002\000\004\020\u015b\001\002" +
    "\000\036\005\uff95\016\uff95\041\uff95\042\uff95\043\uff95\044" +
    "\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051\uff95\052\uff95" +
    "\053\uff95\076\uff95\001\002\000\026\011\174\012\173\013" +
    "\164\035\166\075\172\076\167\101\165\103\163\104\170" +
    "\105\171\001\002\000\016\020\u015e\033\177\034\200\035" +
    "\201\036\202\040\176\001\002\000\036\005\uff93\016\uff93" +
    "\041\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93\047" +
    "\uff93\050\uff93\051\uff93\052\uff93\053\uff93\076\uff93\001\002" +
    "\000\004\020\u0160\001\002\000\036\005\uff98\016\uff98\041" +
    "\uff98\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047\uff98" +
    "\050\uff98\051\uff98\052\uff98\053\uff98\076\uff98\001\002\000" +
    "\004\020\u0162\001\002\000\036\005\uff96\016\uff96\041\uff96" +
    "\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96\050" +
    "\uff96\051\uff96\052\uff96\053\uff96\076\uff96\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0160\000\024\002\012\003\004\005\017\006\003\007" +
    "\021\011\006\015\007\025\010\074\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\027\012\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\023\007\022\015\007\025\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\040\005\017\006\003" +
    "\007\021\015\007\025\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\115\043\001\001\000\002\001\001" +
    "\000\024\015\051\023\045\024\052\025\010\036\047\040" +
    "\054\047\055\055\056\056\046\001\001\000\002\001\001" +
    "\000\006\025\160\037\u0160\001\001\000\006\025\160\037" +
    "\u015e\001\001\000\006\025\160\037\u0149\001\001\000\006" +
    "\025\060\026\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\051\023\077\024\052" +
    "\025\010\036\047\040\054\055\056\056\046\001\001\000" +
    "\006\025\060\026\057\001\001\000\004\030\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\120\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\031\073\032\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\103\001\001\000\002\001\001\000\006\031\105\032" +
    "\074\001\001\000\004\116\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\025\110\030\111\041\114\042" +
    "\113\043\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\030\111\042\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\025\152\030\132\044\151\045\142\046" +
    "\140\052\134\054\141\066\126\067\135\070\146\075\131" +
    "\076\124\077\122\106\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\u0132\001\001\000\002\001\001" +
    "\000\012\025\u0115\037\u011a\111\261\112\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\154\001\001\000" +
    "\030\030\132\045\153\046\140\052\134\066\126\067\135" +
    "\070\146\075\131\076\124\077\122\106\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\025\160\037\157\001\001\000\004\033\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\216\001\001\000\002\001\001\000" +
    "\004\034\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\206\001\001" +
    "\000\004\033\205\001\001\000\004\033\204\001\001\000" +
    "\004\033\203\001\001\000\004\033\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\025\152\030\132\044" +
    "\151\045\142\046\140\052\134\054\222\066\126\067\135" +
    "\070\146\075\131\076\124\077\122\106\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\021\235\033\233\057\232\077\231\001\001\000\002\001" +
    "\001\000\010\025\262\111\261\112\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\247\001\001\000\004\033\244\001\001\000\004\061\237" +
    "\001\001\000\002\001\001\000\010\033\233\057\242\077" +
    "\231\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\246\001\001\000\002\001\001\000\004\033\256\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\033\266\100\265\101\264" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\033\266\101\272\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\021\277\033\233" +
    "\057\232\077\231\001\001\000\004\061\237\001\001\000" +
    "\002\001\001\000\036\025\152\030\132\044\151\045\142" +
    "\046\140\052\134\054\302\066\126\067\135\070\146\075" +
    "\131\076\124\077\122\106\127\001\001\000\002\001\001" +
    "\000\020\025\313\062\307\063\311\064\312\065\310\071" +
    "\306\072\304\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\062\321\063" +
    "\311\064\322\001\001\000\002\001\001\000\004\063\315" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\025\152\030\132\044\151\045\142\046\140" +
    "\052\134\054\317\066\126\067\135\070\146\075\131\076" +
    "\124\077\122\106\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\323\063\315\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\021\326" +
    "\033\233\057\232\077\231\001\001\000\004\061\237\001" +
    "\001\000\002\001\001\000\036\025\152\030\132\044\151" +
    "\045\142\046\140\052\134\054\331\066\126\067\135\070" +
    "\146\075\131\076\124\077\122\106\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\337\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\343\025\346\102" +
    "\342\103\344\001\001\000\006\025\361\105\357\001\001" +
    "\000\004\102\356\001\001\000\002\001\001\000\004\104" +
    "\351\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\025" +
    "\152\030\132\044\151\045\142\046\140\052\134\054\354" +
    "\066\126\067\135\070\146\075\131\076\124\077\122\106" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\025\152\030\132\044\151\045\142\046\140" +
    "\052\134\054\363\066\126\067\135\070\146\075\131\076" +
    "\124\077\122\106\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\367\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\025\160\037\373\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\051\u0100\113\377\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\u0107\001\001\000\002\001\001\000" +
    "\012\021\u0109\033\233\057\232\077\231\001\001\000\004" +
    "\061\237\001\001\000\006\051\u010b\113\377\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\025\152\030\132" +
    "\044\151\045\142\046\140\052\134\054\u010e\066\126\067" +
    "\135\070\146\075\131\076\124\077\122\106\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\u0112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\u011d\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\u0120\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\u0123\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\u0126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\u012f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\021\u0135\033" +
    "\233\057\232\077\231\001\001\000\004\061\237\001\001" +
    "\000\002\001\001\000\036\025\152\030\132\044\151\045" +
    "\142\046\140\052\134\054\u0138\066\126\067\135\070\146" +
    "\075\131\076\124\077\122\106\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\117\u013c" +
    "\001\001\000\002\001\001\000\014\025\110\030\111\041" +
    "\114\042\113\043\u013e\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\025\152\030\132\044\151\045\142\046" +
    "\140\052\134\054\u0141\066\126\067\135\070\146\075\131" +
    "\076\124\077\122\106\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\u014c" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\u014f\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\u0152\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\u0155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\u015c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


     
    //Error recovery
    public void syntax_error(Symbol s){
        Errorjv.texto += "Syntax error: " + s.value + " Line " + (s.left+1) + " Col " + ( s.right + 1) +"\n";
        System.out.println("Syntax error: " + s.value + " Line " + (s.left+1) + " Col " + ( s.right + 1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        Errorjv.texto += "Syntax error: " + s.value + " Line " + (s.left+1) + " Col " + ( s.right + 1) +"\n";
        System.out.println("Fatal Syntax Error: "+ s.value + " Linea " + (s.left+1) + " Col " + (s.right + 1) +"\n");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    String aux = "";
    String clase = "";
    String metodo = "variable global";
    String tipop = "";
    int contador = 0;
    int contador2 = 0;
    int nli = 0;
    int nlf = 0;
    public String codigo = "";

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PACKAGE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PACKAGE ::= PA PUNTOCOMA IMPORTCLASS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PACKAGE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PACKAGE ::= IMPORTCLASS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PACKAGE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PACKAGE ::= error PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PACKAGE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PACKAGE ::= error CORRCH_B 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PACKAGE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PA ::= PACK IDD 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PA",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPORTCLASS ::= IMPORT CLASS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORTCLASS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IMPORTCLASS ::= CLASS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORTCLASS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$0 ::= 
            {
              String RESULT =null;
		int claleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int claright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cla = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
clase = id;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CLASS ::= VISIB CLAS IDD NT$0 CORRCH_A CONTENIDOCLASE2 CORRCH_B 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int claleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int claright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String cla = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLASS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONTENIDOCLASE2 ::= CONTENIDOCLASE2 CONTENIDOCLASE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASE2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONTENIDOCLASE2 ::= CONTENIDOCLASE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASE2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTENIDOCLASE ::= DECLARACIONDATO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTENIDOCLASE ::= DECLAMETODO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOCLASE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$1 ::= 
            {
              String RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 metodo = id;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLAMETODO ::= VISIB STATIC TIPOD IDD NT$1 PAR_A PARAMETROS3 PAR_B CORRCH_A CONTENIDOMETODO3 CORRCH_B 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int parametleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int parametright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String paramet = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
           
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAMETODO",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$2 ::= 
            {
              String RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 metodo = id;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLAMETODO ::= VISIB STATIC VOIDD IDD NT$2 PAR_A PARAMETROS3 PAR_B CORRCH_A CONTENIDOMETODO3 CORRCH_B 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int paratleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int paratright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String parat = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
         

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLAMETODO",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // RETURN ::= RET EXP PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // RETURN ::= RET PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURN",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MOD ::= IDD MAS IGUAL EXP PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOD",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONTENIDOMETODO3 ::= CONTENIDOMETODO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO3",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONTENIDOMETODO3 ::= VACIO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO3",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONTENIDOMETODO ::= CONTENIDOMETODO CONTENIDOMETODO2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTENIDOMETODO ::= CONTENIDOMETODO2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTENIDOMETODO2 ::= METODODATO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONTENIDOMETODO2 ::= IIFF 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTENIDOMETODO2 ::= WHILE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTENIDOMETODO2 ::= DO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTENIDOMETODO2 ::= FOR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTENIDOMETODO2 ::= SWITCH 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTENIDOMETODO2 ::= LLAMADA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTENIDOMETODO2 ::= THES 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTENIDOMETODO2 ::= RETURN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONTENIDOMETODO2 ::= BRE PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONTENIDOMETODO2 ::= CONT PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONTENIDOMETODO2 ::= error PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONTENIDOMETODO2 ::= error CORRCH_B 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOMETODO2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PRINT ::= CONS PUNTO READL PUNTO WRITEL PAR_A EXP PAR_B PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // THES ::= THE PUNTO IDD IGUAL EXP PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("THES",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LLAMADA2 ::= LLAMADA3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA2",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LLAMADA2 ::= VACIO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA2",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LLAMADA3 ::= LLAMADA3 PUNTO IDD 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA3",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LLAMADA3 ::= PUNTO IDD 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA3",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LLAMADA ::= IDD LLAMADA2 PAR_A CONTENIDOLLAMADA PAR_B PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONTENIDOLLAMADA ::= CONTENIDOLLAMADA COMA CONTENIDOLLAMADA2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOLLAMADA",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONTENIDOLLAMADA ::= CONTENIDOLLAMADA2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOLLAMADA",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONTENIDOLLAMADA2 ::= EXP 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOLLAMADA2",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SWITCH ::= SWIT PAR_A EXP PAR_B CORRCH_A CONTENIDOSWITCH2 CORRCH_B 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONTENIDOSWITCH2 ::= CONTENIDOSWITCH3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOSWITCH2",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONTENIDOSWITCH2 ::= VACIO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOSWITCH2",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONTENIDOSWITCH3 ::= CONTENIDOSWITCH3 CONTENIDOSWITCH 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOSWITCH3",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONTENIDOSWITCH3 ::= CONTENIDOSWITCH DEFAULT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOSWITCH3",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COMILL ::= TEXTO1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMILL",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // COMILL ::= TEXTO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMILL",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // COMILL ::= NUMERO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMILL",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DEFAULT ::= DEF DOSPUNTOS CONTENIDOMETODO3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DEFAULT ::= VACIO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONTENIDOSWITCH ::= CAS COMILL DOSPUNTOS CONTENIDOMETODO3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENIDOSWITCH",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FOR ::= FORR PAR_A IDDD PUNTOCOMA CONDICION PUNTOCOMA IDDD PAR_B CORRCH_A CONTENIDOMETODO3 CORRCH_B 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IDDD ::= INT2 IDD IGUAL EXP 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int iddleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iddright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String idd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDDD",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IDDD ::= IDD IGUAL EXP 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDDD",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IDDD ::= IDD MASMAS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDDD",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IDDD ::= IDD MENOSMENOS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDDD",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // INT2 ::= INT 
            {
              String RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT =in;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INT2",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // INT2 ::= CHARR 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT =ch;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INT2",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // INT2 ::= DOUB 
            {
              String RESULT =null;
		int duuleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int duuright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String duu = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT =duu;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INT2",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DO ::= DOO CORRCH_A CONTENIDOMETODO3 CORRCH_B WHIL PAR_A CONDICION PAR_B 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DO",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // WHILE ::= WHIL PAR_A CONDICION PAR_B CORRCH_A CONTENIDOMETODO3 CORRCH_B 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // METODODATO ::= TIPOD IDD ASIGNAR PUNTOCOMA 
            {
              String RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODODATO",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // METODODATO ::= IDD ASIGNAR PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODODATO",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // METODODATO ::= FINA TIPOD IDD ASIGNAR PUNTOCOMA 
            {
              String RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tip = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODODATO",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // METODODATO ::= IDD IDD IGUAL NEWW IDD PAR_A PAR_B PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODODATO",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // METODODATO ::= IDD MAS IGUAL EXP PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODODATO",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // METODODATO ::= IDD MENOS IGUAL EXP PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODODATO",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // METODODATO ::= IDD MODULO IGUAL EXP PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODODATO",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // METODODATO ::= IDD POR IGUAL EXP PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODODATO",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // METODODATO ::= IDD DIVIDIR IGUAL EXP PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODODATO",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IIFF ::= IFF PAR_A CONDICION PAR_B CORRCH_A CONTENIDOMETODO3 CORRCH_B ELSEI3 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IIFF",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ELSEI3 ::= ELSEI 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSEI3",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ELSEI3 ::= ELSE1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSEI3",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ELSEI3 ::= ELSEI2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSEI3",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ELSEI3 ::= VACIO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSEI3",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ELSEI2 ::= ELSEI ELSE1 VACIO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSEI2",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ELSEI ::= ELSEI ELSE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSEI",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ELSEI ::= ELSE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSEI",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ELSE ::= ELS IFF PAR_A CONDICION PAR_B CORRCH_A CONTENIDOMETODO3 CORRCH_B 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ELSE1 ::= ELSE1 ELSE2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE1",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ELSE1 ::= ELSE2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE1",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ELSE2 ::= ELS CORRCH_A CONTENIDOMETODO3 CORRCH_B 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE2",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONDICION ::= CONDICION OPOI CONDICION2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONDICION ::= CONDICION2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONDICION2 ::= EXP OP EXP 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION2",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONDICION2 ::= NOTT EXP IGUAL EXP 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION2",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CONDICION2 ::= NOTT IDD 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION2",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CONDICION2 ::= LLAMADA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION2",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CONDICION2 ::= IDD 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION2",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CONDICION2 ::= FAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION2",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CONDICION2 ::= TRU 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION2",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PARAMETROS3 ::= PARAMETROS 
            {
              String RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = pa;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS3",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PARAMETROS3 ::= VACIO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS3",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PARAMETROS ::= PARAMETROS COMA PARAMETROS2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PARAMETROS ::= PARAMETROS2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PARAMETROS2 ::= TIPOD IDD 
            {
              String RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          


              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DECLARACIONDATO ::= DECLACADENA ASIGNAR PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONDATO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DECLARACIONDATO ::= IDD ASIGNAR PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONDATO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DECLARACIONDATO ::= FINALSTATIC ASIGNAR PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONDATO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DECLARACIONDATO ::= IDD IDD IGUAL NEWW IDD PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONDATO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DECLARACIONDATO ::= IDD MAS IGUAL EXP PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONDATO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DECLARACIONDATO ::= IDD MENOS IGUAL EXP PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONDATO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DECLARACIONDATO ::= IDD MODULO IGUAL EXP PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONDATO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DECLARACIONDATO ::= IDD POR IGUAL EXP PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONDATO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DECLARACIONDATO ::= IDD DIVIDIR IGUAL EXP PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONDATO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ASIGNAR ::= IGUAL EXP 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNAR",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ASIGNAR ::= VACIO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNAR",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DECLACADENA ::= VISIB STATIC TIPOD LISTAID 
            {
              String RESULT =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLACADENA",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$3 ::= 
            {
              String RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
tipop = td;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // FINALSTATIC ::= FINAL STATIC TIPOD NT$3 LISTAID 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
   
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FINALSTATIC",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXP ::= IDD 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXP ::= NUMERO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXP ::= TEXTO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXP ::= TRU 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXP ::= FAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXP ::= MENOS NUMID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXP ::= PAR_A EXP PAR_B 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXP ::= EXP MENOS EXP 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXP ::= EXP MAS EXP 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXP ::= EXP POR EXP 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXP ::= EXP DIVIDIR EXP 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXP ::= EXP MODULO EXP 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXP ::= IDD MASMAS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXP ::= IDD MENOSMENOS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXP ::= MASMAS IDD 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXP ::= MENOSMENOS IDD 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXP ::= TEXTO1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NUMID ::= IDD 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NUMID",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NUMID ::= NUMERO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NUMID",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // LISTAID ::= LISTAID COMA LISTAID2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAID",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // LISTAID ::= LISTAID2 
            {
              String RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAID",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // LISTAID2 ::= IDD 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
             

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAID2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // IMPORT ::= IMPORT IMPORT2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORT",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // IMPORT ::= IMPORT2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORT",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // IMPORT2 ::= IMP NOMBREIMP PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORT2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NOMBREIMP ::= CADENAIMP 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBREIMP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NOMBREIMP ::= CADENAIMP PUNTO POR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOMBREIMP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CADENAIMP ::= CADENAIMP PUNTO IDD 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CADENAIMP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CADENAIMP ::= IDD 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CADENAIMP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // TIPOD ::= STRINGG 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = st; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOD",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // TIPOD ::= BOOL 
            {
              String RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = bo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOD",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // TIPOD ::= DOUB 
            {
              String RESULT =null;
		int duleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int duright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String du = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = du; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOD",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // TIPOD ::= INT 
            {
              String RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String in = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = in; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOD",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // TIPOD ::= LONGG 
            {
              String RESULT =null;
		int loleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int loright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOD",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // TIPOD ::= CHARR 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ch; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOD",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // OPOI ::= ANDD 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPOI",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // OPOI ::= ORR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPOI",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // VISIB ::= PUB 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // VISIB ::= PRIV 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // VISIB ::= PROTEC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // VISIB ::= VACIO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VISIB",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // FINAL ::= FINA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FINAL",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // STATIC ::= STAT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATIC",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // STATIC ::= VACIO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STATIC",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // VACIO ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VACIO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // OP ::= IGUALIGUAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // OP ::= DIFERENTE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // OP ::= MENORR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // OP ::= MENORRIGUAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // OP ::= MAYORR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // OP ::= MAYORRIGUAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
